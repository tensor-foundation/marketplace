/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import {
  resolveBuyerAta,
  resolveListAta,
  resolveWnsApprovePda,
  resolveWnsDistributionPda,
  resolveWnsExtraAccountMetasPda,
} from '@tensor-foundation/resolvers';
import {
  resolveDistributionCurrencyAta,
  resolveFeeVaultCurrencyAta,
  resolveFeeVaultPdaFromListState,
  resolveMakerBrokerCurrencyAta,
  resolveOwnerCurrencyAta,
  resolvePayerCurrencyAta,
  resolveTakerBrokerCurrencyAta,
} from '../../hooked';
import { findListStatePda } from '../pdas';
import { TENSOR_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  expectTransactionSigner,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type BuyWnsSplInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountFeeVaultCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountBuyer extends string | IAccountMeta<string> = string,
  TAccountBuyerTa extends string | IAccountMeta<string> = string,
  TAccountListTa extends string | IAccountMeta<string> = string,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountCurrency extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountOwnerCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountPayerCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TAccountTakerBrokerCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountMakerBroker extends string | IAccountMeta<string> = string,
  TAccountMakerBrokerCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountRentDestination extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountCurrencyTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountMarketplaceProgram extends
    | string
    | IAccountMeta<string> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountApprove extends string | IAccountMeta<string> = string,
  TAccountDistribution extends string | IAccountMeta<string> = string,
  TAccountDistributionCurrencyTa extends string | IAccountMeta<string> = string,
  TAccountWnsProgram extends
    | string
    | IAccountMeta<string> = 'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM',
  TAccountDistributionProgram extends
    | string
    | IAccountMeta<string> = 'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay',
  TAccountExtraMetas extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountFeeVaultCurrencyTa extends string
        ? WritableAccount<TAccountFeeVaultCurrencyTa>
        : TAccountFeeVaultCurrencyTa,
      TAccountBuyer extends string
        ? ReadonlyAccount<TAccountBuyer>
        : TAccountBuyer,
      TAccountBuyerTa extends string
        ? WritableAccount<TAccountBuyerTa>
        : TAccountBuyerTa,
      TAccountListTa extends string
        ? WritableAccount<TAccountListTa>
        : TAccountListTa,
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountCurrency extends string
        ? ReadonlyAccount<TAccountCurrency>
        : TAccountCurrency,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountOwnerCurrencyTa extends string
        ? WritableAccount<TAccountOwnerCurrencyTa>
        : TAccountOwnerCurrencyTa,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountPayerCurrencyTa extends string
        ? WritableAccount<TAccountPayerCurrencyTa>
        : TAccountPayerCurrencyTa,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      TAccountTakerBrokerCurrencyTa extends string
        ? WritableAccount<TAccountTakerBrokerCurrencyTa>
        : TAccountTakerBrokerCurrencyTa,
      TAccountMakerBroker extends string
        ? WritableAccount<TAccountMakerBroker>
        : TAccountMakerBroker,
      TAccountMakerBrokerCurrencyTa extends string
        ? WritableAccount<TAccountMakerBrokerCurrencyTa>
        : TAccountMakerBrokerCurrencyTa,
      TAccountRentDestination extends string
        ? WritableAccount<TAccountRentDestination>
        : TAccountRentDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountCurrencyTokenProgram extends string
        ? ReadonlyAccount<TAccountCurrencyTokenProgram>
        : TAccountCurrencyTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMarketplaceProgram extends string
        ? ReadonlyAccount<TAccountMarketplaceProgram>
        : TAccountMarketplaceProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountApprove extends string
        ? WritableAccount<TAccountApprove>
        : TAccountApprove,
      TAccountDistribution extends string
        ? WritableAccount<TAccountDistribution>
        : TAccountDistribution,
      TAccountDistributionCurrencyTa extends string
        ? WritableAccount<TAccountDistributionCurrencyTa>
        : TAccountDistributionCurrencyTa,
      TAccountWnsProgram extends string
        ? ReadonlyAccount<TAccountWnsProgram>
        : TAccountWnsProgram,
      TAccountDistributionProgram extends string
        ? ReadonlyAccount<TAccountDistributionProgram>
        : TAccountDistributionProgram,
      TAccountExtraMetas extends string
        ? ReadonlyAccount<TAccountExtraMetas>
        : TAccountExtraMetas,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      ...TRemainingAccounts,
    ]
  >;

export type BuyWnsSplInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmount: bigint;
};

export type BuyWnsSplInstructionDataArgs = { maxAmount: number | bigint };

export function getBuyWnsSplInstructionDataEncoder(): Encoder<BuyWnsSplInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([113, 137, 57, 23, 186, 196, 217, 210]),
    })
  );
}

export function getBuyWnsSplInstructionDataDecoder(): Decoder<BuyWnsSplInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmount', getU64Decoder()],
  ]);
}

export function getBuyWnsSplInstructionDataCodec(): Codec<
  BuyWnsSplInstructionDataArgs,
  BuyWnsSplInstructionData
> {
  return combineCodec(
    getBuyWnsSplInstructionDataEncoder(),
    getBuyWnsSplInstructionDataDecoder()
  );
}

export type BuyWnsSplInstructionExtraArgs = {
  collection: Address;
  paymentMint?: Address;
};

export type BuyWnsSplAsyncInput<
  TAccountFeeVault extends string = string,
  TAccountFeeVaultCurrencyTa extends string = string,
  TAccountBuyer extends string = string,
  TAccountBuyerTa extends string = string,
  TAccountListTa extends string = string,
  TAccountListState extends string = string,
  TAccountMint extends string = string,
  TAccountCurrency extends string = string,
  TAccountOwner extends string = string,
  TAccountOwnerCurrencyTa extends string = string,
  TAccountPayer extends string = string,
  TAccountPayerCurrencyTa extends string = string,
  TAccountTakerBroker extends string = string,
  TAccountTakerBrokerCurrencyTa extends string = string,
  TAccountMakerBroker extends string = string,
  TAccountMakerBrokerCurrencyTa extends string = string,
  TAccountRentDestination extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountCurrencyTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountApprove extends string = string,
  TAccountDistribution extends string = string,
  TAccountDistributionCurrencyTa extends string = string,
  TAccountWnsProgram extends string = string,
  TAccountDistributionProgram extends string = string,
  TAccountExtraMetas extends string = string,
  TAccountCosigner extends string = string,
> = {
  feeVault?: Address<TAccountFeeVault>;
  feeVaultCurrencyTa?: Address<TAccountFeeVaultCurrencyTa>;
  buyer?: Address<TAccountBuyer>;
  buyerTa?: Address<TAccountBuyerTa>;
  listTa?: Address<TAccountListTa>;
  listState?: Address<TAccountListState>;
  /** WNS asset mint. */
  mint: Address<TAccountMint>;
  /** SPL token mint of the currency. */
  currency: Address<TAccountCurrency>;
  owner: Address<TAccountOwner>;
  ownerCurrencyTa?: Address<TAccountOwnerCurrencyTa>;
  payer: TransactionSigner<TAccountPayer>;
  payerCurrencyTa?: Address<TAccountPayerCurrencyTa>;
  takerBroker?: Address<TAccountTakerBroker>;
  takerBrokerCurrencyTa?: Address<TAccountTakerBrokerCurrencyTa>;
  makerBroker?: Address<TAccountMakerBroker>;
  makerBrokerCurrencyTa?: Address<TAccountMakerBrokerCurrencyTa>;
  rentDestination?: Address<TAccountRentDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  currencyTokenProgram?: Address<TAccountCurrencyTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  approve?: Address<TAccountApprove>;
  distribution?: Address<TAccountDistribution>;
  distributionCurrencyTa?: Address<TAccountDistributionCurrencyTa>;
  wnsProgram?: Address<TAccountWnsProgram>;
  distributionProgram?: Address<TAccountDistributionProgram>;
  extraMetas?: Address<TAccountExtraMetas>;
  cosigner?: TransactionSigner<TAccountCosigner>;
  maxAmount: BuyWnsSplInstructionDataArgs['maxAmount'];
  collection: BuyWnsSplInstructionExtraArgs['collection'];
  paymentMint?: BuyWnsSplInstructionExtraArgs['paymentMint'];
  creators?: Array<Address>;
};

export async function getBuyWnsSplInstructionAsync<
  TAccountFeeVault extends string,
  TAccountFeeVaultCurrencyTa extends string,
  TAccountBuyer extends string,
  TAccountBuyerTa extends string,
  TAccountListTa extends string,
  TAccountListState extends string,
  TAccountMint extends string,
  TAccountCurrency extends string,
  TAccountOwner extends string,
  TAccountOwnerCurrencyTa extends string,
  TAccountPayer extends string,
  TAccountPayerCurrencyTa extends string,
  TAccountTakerBroker extends string,
  TAccountTakerBrokerCurrencyTa extends string,
  TAccountMakerBroker extends string,
  TAccountMakerBrokerCurrencyTa extends string,
  TAccountRentDestination extends string,
  TAccountTokenProgram extends string,
  TAccountCurrencyTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountSystemProgram extends string,
  TAccountApprove extends string,
  TAccountDistribution extends string,
  TAccountDistributionCurrencyTa extends string,
  TAccountWnsProgram extends string,
  TAccountDistributionProgram extends string,
  TAccountExtraMetas extends string,
  TAccountCosigner extends string,
>(
  input: BuyWnsSplAsyncInput<
    TAccountFeeVault,
    TAccountFeeVaultCurrencyTa,
    TAccountBuyer,
    TAccountBuyerTa,
    TAccountListTa,
    TAccountListState,
    TAccountMint,
    TAccountCurrency,
    TAccountOwner,
    TAccountOwnerCurrencyTa,
    TAccountPayer,
    TAccountPayerCurrencyTa,
    TAccountTakerBroker,
    TAccountTakerBrokerCurrencyTa,
    TAccountMakerBroker,
    TAccountMakerBrokerCurrencyTa,
    TAccountRentDestination,
    TAccountTokenProgram,
    TAccountCurrencyTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMarketplaceProgram,
    TAccountSystemProgram,
    TAccountApprove,
    TAccountDistribution,
    TAccountDistributionCurrencyTa,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas,
    TAccountCosigner
  >
): Promise<
  BuyWnsSplInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountFeeVault,
    TAccountFeeVaultCurrencyTa,
    TAccountBuyer,
    TAccountBuyerTa,
    TAccountListTa,
    TAccountListState,
    TAccountMint,
    TAccountCurrency,
    TAccountOwner,
    TAccountOwnerCurrencyTa,
    TAccountPayer,
    TAccountPayerCurrencyTa,
    TAccountTakerBroker,
    TAccountTakerBrokerCurrencyTa,
    TAccountMakerBroker,
    TAccountMakerBrokerCurrencyTa,
    TAccountRentDestination,
    TAccountTokenProgram,
    TAccountCurrencyTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMarketplaceProgram,
    TAccountSystemProgram,
    TAccountApprove,
    TAccountDistribution,
    TAccountDistributionCurrencyTa,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas,
    TAccountCosigner
  >
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    feeVaultCurrencyTa: {
      value: input.feeVaultCurrencyTa ?? null,
      isWritable: true,
    },
    buyer: { value: input.buyer ?? null, isWritable: false },
    buyerTa: { value: input.buyerTa ?? null, isWritable: true },
    listTa: { value: input.listTa ?? null, isWritable: true },
    listState: { value: input.listState ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    currency: { value: input.currency ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    ownerCurrencyTa: { value: input.ownerCurrencyTa ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    payerCurrencyTa: { value: input.payerCurrencyTa ?? null, isWritable: true },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
    takerBrokerCurrencyTa: {
      value: input.takerBrokerCurrencyTa ?? null,
      isWritable: true,
    },
    makerBroker: { value: input.makerBroker ?? null, isWritable: true },
    makerBrokerCurrencyTa: {
      value: input.makerBrokerCurrencyTa ?? null,
      isWritable: true,
    },
    rentDestination: { value: input.rentDestination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    currencyTokenProgram: {
      value: input.currencyTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    approve: { value: input.approve ?? null, isWritable: true },
    distribution: { value: input.distribution ?? null, isWritable: true },
    distributionCurrencyTa: {
      value: input.distributionCurrencyTa ?? null,
      isWritable: true,
    },
    wnsProgram: { value: input.wnsProgram ?? null, isWritable: false },
    distributionProgram: {
      value: input.distributionProgram ?? null,
      isWritable: false,
    },
    extraMetas: { value: input.extraMetas ?? null, isWritable: false },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.listState.value) {
    accounts.listState.value = await findListStatePda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.feeVault.value) {
    accounts.feeVault = {
      ...accounts.feeVault,
      ...(await resolveFeeVaultPdaFromListState(resolverScope)),
    };
  }
  if (!accounts.currencyTokenProgram.value) {
    accounts.currencyTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.feeVaultCurrencyTa.value) {
    accounts.feeVaultCurrencyTa = {
      ...accounts.feeVaultCurrencyTa,
      ...(await resolveFeeVaultCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.buyer.value) {
    accounts.buyer.value = expectTransactionSigner(
      accounts.payer.value
    ).address;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.buyerTa.value) {
    accounts.buyerTa = {
      ...accounts.buyerTa,
      ...(await resolveBuyerAta(resolverScope)),
    };
  }
  if (!accounts.listTa.value) {
    accounts.listTa = {
      ...accounts.listTa,
      ...(await resolveListAta(resolverScope)),
    };
  }
  if (!accounts.ownerCurrencyTa.value) {
    accounts.ownerCurrencyTa = {
      ...accounts.ownerCurrencyTa,
      ...(await resolveOwnerCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.payerCurrencyTa.value) {
    accounts.payerCurrencyTa = {
      ...accounts.payerCurrencyTa,
      ...(await resolvePayerCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.takerBrokerCurrencyTa.value) {
    accounts.takerBrokerCurrencyTa = {
      ...accounts.takerBrokerCurrencyTa,
      ...(await resolveTakerBrokerCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.makerBrokerCurrencyTa.value) {
    accounts.makerBrokerCurrencyTa = {
      ...accounts.makerBrokerCurrencyTa,
      ...(await resolveMakerBrokerCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.rentDestination.value) {
    accounts.rentDestination.value = expectSome(accounts.owner.value);
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.approve.value) {
    accounts.approve = {
      ...accounts.approve,
      ...(await resolveWnsApprovePda(resolverScope)),
    };
  }
  if (!args.paymentMint) {
    args.paymentMint =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.distribution.value) {
    accounts.distribution = {
      ...accounts.distribution,
      ...(await resolveWnsDistributionPda(resolverScope)),
    };
  }
  if (!accounts.distributionCurrencyTa.value) {
    accounts.distributionCurrencyTa = {
      ...accounts.distributionCurrencyTa,
      ...(await resolveDistributionCurrencyAta(resolverScope)),
    };
  }
  if (!accounts.wnsProgram.value) {
    accounts.wnsProgram.value =
      'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM' as Address<'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM'>;
  }
  if (!accounts.distributionProgram.value) {
    accounts.distributionProgram.value =
      'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay' as Address<'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay'>;
  }
  if (!accounts.extraMetas.value) {
    accounts.extraMetas = {
      ...accounts.extraMetas,
      ...(await resolveWnsExtraAccountMetasPda(resolverScope)),
    };
  }

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = (args.creators ?? []).map(
    (address) => ({ address, role: AccountRole.WRITABLE })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.feeVaultCurrencyTa),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.buyerTa),
      getAccountMeta(accounts.listTa),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.currency),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.ownerCurrencyTa),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.payerCurrencyTa),
      getAccountMeta(accounts.takerBroker),
      getAccountMeta(accounts.takerBrokerCurrencyTa),
      getAccountMeta(accounts.makerBroker),
      getAccountMeta(accounts.makerBrokerCurrencyTa),
      getAccountMeta(accounts.rentDestination),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.currencyTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.approve),
      getAccountMeta(accounts.distribution),
      getAccountMeta(accounts.distributionCurrencyTa),
      getAccountMeta(accounts.wnsProgram),
      getAccountMeta(accounts.distributionProgram),
      getAccountMeta(accounts.extraMetas),
      getAccountMeta(accounts.cosigner),
      ...remainingAccounts,
    ],
    programAddress,
    data: getBuyWnsSplInstructionDataEncoder().encode(
      args as BuyWnsSplInstructionDataArgs
    ),
  } as BuyWnsSplInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountFeeVault,
    TAccountFeeVaultCurrencyTa,
    TAccountBuyer,
    TAccountBuyerTa,
    TAccountListTa,
    TAccountListState,
    TAccountMint,
    TAccountCurrency,
    TAccountOwner,
    TAccountOwnerCurrencyTa,
    TAccountPayer,
    TAccountPayerCurrencyTa,
    TAccountTakerBroker,
    TAccountTakerBrokerCurrencyTa,
    TAccountMakerBroker,
    TAccountMakerBrokerCurrencyTa,
    TAccountRentDestination,
    TAccountTokenProgram,
    TAccountCurrencyTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMarketplaceProgram,
    TAccountSystemProgram,
    TAccountApprove,
    TAccountDistribution,
    TAccountDistributionCurrencyTa,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas,
    TAccountCosigner
  >;

  return instruction;
}

export type BuyWnsSplInput<
  TAccountFeeVault extends string = string,
  TAccountFeeVaultCurrencyTa extends string = string,
  TAccountBuyer extends string = string,
  TAccountBuyerTa extends string = string,
  TAccountListTa extends string = string,
  TAccountListState extends string = string,
  TAccountMint extends string = string,
  TAccountCurrency extends string = string,
  TAccountOwner extends string = string,
  TAccountOwnerCurrencyTa extends string = string,
  TAccountPayer extends string = string,
  TAccountPayerCurrencyTa extends string = string,
  TAccountTakerBroker extends string = string,
  TAccountTakerBrokerCurrencyTa extends string = string,
  TAccountMakerBroker extends string = string,
  TAccountMakerBrokerCurrencyTa extends string = string,
  TAccountRentDestination extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountCurrencyTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountApprove extends string = string,
  TAccountDistribution extends string = string,
  TAccountDistributionCurrencyTa extends string = string,
  TAccountWnsProgram extends string = string,
  TAccountDistributionProgram extends string = string,
  TAccountExtraMetas extends string = string,
  TAccountCosigner extends string = string,
> = {
  feeVault: Address<TAccountFeeVault>;
  feeVaultCurrencyTa: Address<TAccountFeeVaultCurrencyTa>;
  buyer?: Address<TAccountBuyer>;
  buyerTa: Address<TAccountBuyerTa>;
  listTa: Address<TAccountListTa>;
  listState: Address<TAccountListState>;
  /** WNS asset mint. */
  mint: Address<TAccountMint>;
  /** SPL token mint of the currency. */
  currency: Address<TAccountCurrency>;
  owner: Address<TAccountOwner>;
  ownerCurrencyTa: Address<TAccountOwnerCurrencyTa>;
  payer: TransactionSigner<TAccountPayer>;
  payerCurrencyTa: Address<TAccountPayerCurrencyTa>;
  takerBroker?: Address<TAccountTakerBroker>;
  takerBrokerCurrencyTa?: Address<TAccountTakerBrokerCurrencyTa>;
  makerBroker?: Address<TAccountMakerBroker>;
  makerBrokerCurrencyTa?: Address<TAccountMakerBrokerCurrencyTa>;
  rentDestination?: Address<TAccountRentDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  currencyTokenProgram?: Address<TAccountCurrencyTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  approve: Address<TAccountApprove>;
  distribution: Address<TAccountDistribution>;
  distributionCurrencyTa: Address<TAccountDistributionCurrencyTa>;
  wnsProgram?: Address<TAccountWnsProgram>;
  distributionProgram?: Address<TAccountDistributionProgram>;
  extraMetas: Address<TAccountExtraMetas>;
  cosigner?: TransactionSigner<TAccountCosigner>;
  maxAmount: BuyWnsSplInstructionDataArgs['maxAmount'];
  collection: BuyWnsSplInstructionExtraArgs['collection'];
  paymentMint?: BuyWnsSplInstructionExtraArgs['paymentMint'];
  creators?: Array<Address>;
};

export function getBuyWnsSplInstruction<
  TAccountFeeVault extends string,
  TAccountFeeVaultCurrencyTa extends string,
  TAccountBuyer extends string,
  TAccountBuyerTa extends string,
  TAccountListTa extends string,
  TAccountListState extends string,
  TAccountMint extends string,
  TAccountCurrency extends string,
  TAccountOwner extends string,
  TAccountOwnerCurrencyTa extends string,
  TAccountPayer extends string,
  TAccountPayerCurrencyTa extends string,
  TAccountTakerBroker extends string,
  TAccountTakerBrokerCurrencyTa extends string,
  TAccountMakerBroker extends string,
  TAccountMakerBrokerCurrencyTa extends string,
  TAccountRentDestination extends string,
  TAccountTokenProgram extends string,
  TAccountCurrencyTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountSystemProgram extends string,
  TAccountApprove extends string,
  TAccountDistribution extends string,
  TAccountDistributionCurrencyTa extends string,
  TAccountWnsProgram extends string,
  TAccountDistributionProgram extends string,
  TAccountExtraMetas extends string,
  TAccountCosigner extends string,
>(
  input: BuyWnsSplInput<
    TAccountFeeVault,
    TAccountFeeVaultCurrencyTa,
    TAccountBuyer,
    TAccountBuyerTa,
    TAccountListTa,
    TAccountListState,
    TAccountMint,
    TAccountCurrency,
    TAccountOwner,
    TAccountOwnerCurrencyTa,
    TAccountPayer,
    TAccountPayerCurrencyTa,
    TAccountTakerBroker,
    TAccountTakerBrokerCurrencyTa,
    TAccountMakerBroker,
    TAccountMakerBrokerCurrencyTa,
    TAccountRentDestination,
    TAccountTokenProgram,
    TAccountCurrencyTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMarketplaceProgram,
    TAccountSystemProgram,
    TAccountApprove,
    TAccountDistribution,
    TAccountDistributionCurrencyTa,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas,
    TAccountCosigner
  >
): BuyWnsSplInstruction<
  typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountFeeVault,
  TAccountFeeVaultCurrencyTa,
  TAccountBuyer,
  TAccountBuyerTa,
  TAccountListTa,
  TAccountListState,
  TAccountMint,
  TAccountCurrency,
  TAccountOwner,
  TAccountOwnerCurrencyTa,
  TAccountPayer,
  TAccountPayerCurrencyTa,
  TAccountTakerBroker,
  TAccountTakerBrokerCurrencyTa,
  TAccountMakerBroker,
  TAccountMakerBrokerCurrencyTa,
  TAccountRentDestination,
  TAccountTokenProgram,
  TAccountCurrencyTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountMarketplaceProgram,
  TAccountSystemProgram,
  TAccountApprove,
  TAccountDistribution,
  TAccountDistributionCurrencyTa,
  TAccountWnsProgram,
  TAccountDistributionProgram,
  TAccountExtraMetas,
  TAccountCosigner
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    feeVaultCurrencyTa: {
      value: input.feeVaultCurrencyTa ?? null,
      isWritable: true,
    },
    buyer: { value: input.buyer ?? null, isWritable: false },
    buyerTa: { value: input.buyerTa ?? null, isWritable: true },
    listTa: { value: input.listTa ?? null, isWritable: true },
    listState: { value: input.listState ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    currency: { value: input.currency ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    ownerCurrencyTa: { value: input.ownerCurrencyTa ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    payerCurrencyTa: { value: input.payerCurrencyTa ?? null, isWritable: true },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
    takerBrokerCurrencyTa: {
      value: input.takerBrokerCurrencyTa ?? null,
      isWritable: true,
    },
    makerBroker: { value: input.makerBroker ?? null, isWritable: true },
    makerBrokerCurrencyTa: {
      value: input.makerBrokerCurrencyTa ?? null,
      isWritable: true,
    },
    rentDestination: { value: input.rentDestination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    currencyTokenProgram: {
      value: input.currencyTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    approve: { value: input.approve ?? null, isWritable: true },
    distribution: { value: input.distribution ?? null, isWritable: true },
    distributionCurrencyTa: {
      value: input.distributionCurrencyTa ?? null,
      isWritable: true,
    },
    wnsProgram: { value: input.wnsProgram ?? null, isWritable: false },
    distributionProgram: {
      value: input.distributionProgram ?? null,
      isWritable: false,
    },
    extraMetas: { value: input.extraMetas ?? null, isWritable: false },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.currencyTokenProgram.value) {
    accounts.currencyTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.buyer.value) {
    accounts.buyer.value = expectTransactionSigner(
      accounts.payer.value
    ).address;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.rentDestination.value) {
    accounts.rentDestination.value = expectSome(accounts.owner.value);
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!args.paymentMint) {
    args.paymentMint =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.wnsProgram.value) {
    accounts.wnsProgram.value =
      'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM' as Address<'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM'>;
  }
  if (!accounts.distributionProgram.value) {
    accounts.distributionProgram.value =
      'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay' as Address<'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay'>;
  }

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = (args.creators ?? []).map(
    (address) => ({ address, role: AccountRole.WRITABLE })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.feeVaultCurrencyTa),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.buyerTa),
      getAccountMeta(accounts.listTa),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.currency),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.ownerCurrencyTa),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.payerCurrencyTa),
      getAccountMeta(accounts.takerBroker),
      getAccountMeta(accounts.takerBrokerCurrencyTa),
      getAccountMeta(accounts.makerBroker),
      getAccountMeta(accounts.makerBrokerCurrencyTa),
      getAccountMeta(accounts.rentDestination),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.currencyTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.approve),
      getAccountMeta(accounts.distribution),
      getAccountMeta(accounts.distributionCurrencyTa),
      getAccountMeta(accounts.wnsProgram),
      getAccountMeta(accounts.distributionProgram),
      getAccountMeta(accounts.extraMetas),
      getAccountMeta(accounts.cosigner),
      ...remainingAccounts,
    ],
    programAddress,
    data: getBuyWnsSplInstructionDataEncoder().encode(
      args as BuyWnsSplInstructionDataArgs
    ),
  } as BuyWnsSplInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountFeeVault,
    TAccountFeeVaultCurrencyTa,
    TAccountBuyer,
    TAccountBuyerTa,
    TAccountListTa,
    TAccountListState,
    TAccountMint,
    TAccountCurrency,
    TAccountOwner,
    TAccountOwnerCurrencyTa,
    TAccountPayer,
    TAccountPayerCurrencyTa,
    TAccountTakerBroker,
    TAccountTakerBrokerCurrencyTa,
    TAccountMakerBroker,
    TAccountMakerBrokerCurrencyTa,
    TAccountRentDestination,
    TAccountTokenProgram,
    TAccountCurrencyTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMarketplaceProgram,
    TAccountSystemProgram,
    TAccountApprove,
    TAccountDistribution,
    TAccountDistributionCurrencyTa,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas,
    TAccountCosigner
  >;

  return instruction;
}

export type ParsedBuyWnsSplInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    feeVault: TAccountMetas[0];
    feeVaultCurrencyTa: TAccountMetas[1];
    buyer: TAccountMetas[2];
    buyerTa: TAccountMetas[3];
    listTa: TAccountMetas[4];
    listState: TAccountMetas[5];
    /** WNS asset mint. */
    mint: TAccountMetas[6];
    /** SPL token mint of the currency. */
    currency: TAccountMetas[7];
    owner: TAccountMetas[8];
    ownerCurrencyTa: TAccountMetas[9];
    payer: TAccountMetas[10];
    payerCurrencyTa: TAccountMetas[11];
    takerBroker?: TAccountMetas[12] | undefined;
    takerBrokerCurrencyTa?: TAccountMetas[13] | undefined;
    makerBroker?: TAccountMetas[14] | undefined;
    makerBrokerCurrencyTa?: TAccountMetas[15] | undefined;
    rentDestination: TAccountMetas[16];
    tokenProgram: TAccountMetas[17];
    currencyTokenProgram: TAccountMetas[18];
    associatedTokenProgram: TAccountMetas[19];
    marketplaceProgram: TAccountMetas[20];
    systemProgram: TAccountMetas[21];
    approve: TAccountMetas[22];
    distribution: TAccountMetas[23];
    distributionCurrencyTa: TAccountMetas[24];
    wnsProgram: TAccountMetas[25];
    distributionProgram: TAccountMetas[26];
    extraMetas: TAccountMetas[27];
    cosigner?: TAccountMetas[28] | undefined;
  };
  data: BuyWnsSplInstructionData;
};

export function parseBuyWnsSplInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBuyWnsSplInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 29) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TENSOR_MARKETPLACE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      feeVault: getNextAccount(),
      feeVaultCurrencyTa: getNextAccount(),
      buyer: getNextAccount(),
      buyerTa: getNextAccount(),
      listTa: getNextAccount(),
      listState: getNextAccount(),
      mint: getNextAccount(),
      currency: getNextAccount(),
      owner: getNextAccount(),
      ownerCurrencyTa: getNextAccount(),
      payer: getNextAccount(),
      payerCurrencyTa: getNextAccount(),
      takerBroker: getNextOptionalAccount(),
      takerBrokerCurrencyTa: getNextOptionalAccount(),
      makerBroker: getNextOptionalAccount(),
      makerBrokerCurrencyTa: getNextOptionalAccount(),
      rentDestination: getNextAccount(),
      tokenProgram: getNextAccount(),
      currencyTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      marketplaceProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      approve: getNextAccount(),
      distribution: getNextAccount(),
      distributionCurrencyTa: getNextAccount(),
      wnsProgram: getNextAccount(),
      distributionProgram: getNextAccount(),
      extraMetas: getNextAccount(),
      cosigner: getNextOptionalAccount(),
    },
    data: getBuyWnsSplInstructionDataDecoder().decode(instruction.data),
  };
}
