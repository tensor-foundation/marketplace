/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  none,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { resolveBidIdOnCreate } from '../../hooked';
import { findBidStatePda } from '../pdas';
import { TENSOR_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  expectTransactionSigner,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getFieldDecoder,
  getFieldEncoder,
  getTargetDecoder,
  getTargetEncoder,
  type Field,
  type FieldArgs,
  type Target,
  type TargetArgs,
} from '../types';

export type BidInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMarketplaceProgram extends
    | string
    | IAccountMeta<string> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSharedEscrow extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMarketplaceProgram extends string
        ? ReadonlyAccount<TAccountMarketplaceProgram>
        : TAccountMarketplaceProgram,
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSharedEscrow extends string
        ? WritableAccount<TAccountSharedEscrow>
        : TAccountSharedEscrow,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      ...TRemainingAccounts,
    ]
  >;

export type BidInstructionData = {
  discriminator: ReadonlyUint8Array;
  bidId: Address;
  target: Target;
  targetId: Address;
  field: Option<Field>;
  fieldId: Option<Address>;
  amount: bigint;
  quantity: number;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type BidInstructionDataArgs = {
  bidId: Address;
  target: TargetArgs;
  targetId: Address;
  field?: OptionOrNullable<FieldArgs>;
  fieldId?: OptionOrNullable<Address>;
  amount: number | bigint;
  quantity?: number;
  expireInSec?: OptionOrNullable<number | bigint>;
  currency?: OptionOrNullable<Address>;
  privateTaker?: OptionOrNullable<Address>;
  makerBroker?: OptionOrNullable<Address>;
};

export function getBidInstructionDataEncoder(): Encoder<BidInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bidId', getAddressEncoder()],
      ['target', getTargetEncoder()],
      ['targetId', getAddressEncoder()],
      ['field', getOptionEncoder(getFieldEncoder())],
      ['fieldId', getOptionEncoder(getAddressEncoder())],
      ['amount', getU64Encoder()],
      ['quantity', getU32Encoder()],
      ['expireInSec', getOptionEncoder(getU64Encoder())],
      ['currency', getOptionEncoder(getAddressEncoder())],
      ['privateTaker', getOptionEncoder(getAddressEncoder())],
      ['makerBroker', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([199, 56, 85, 38, 146, 243, 37, 158]),
      field: value.field ?? none(),
      fieldId: value.fieldId ?? none(),
      quantity: value.quantity ?? 1,
      expireInSec: value.expireInSec ?? none(),
      currency: value.currency ?? none(),
      privateTaker: value.privateTaker ?? none(),
      makerBroker: value.makerBroker ?? none(),
    })
  );
}

export function getBidInstructionDataDecoder(): Decoder<BidInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bidId', getAddressDecoder()],
    ['target', getTargetDecoder()],
    ['targetId', getAddressDecoder()],
    ['field', getOptionDecoder(getFieldDecoder())],
    ['fieldId', getOptionDecoder(getAddressDecoder())],
    ['amount', getU64Decoder()],
    ['quantity', getU32Decoder()],
    ['expireInSec', getOptionDecoder(getU64Decoder())],
    ['currency', getOptionDecoder(getAddressDecoder())],
    ['privateTaker', getOptionDecoder(getAddressDecoder())],
    ['makerBroker', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getBidInstructionDataCodec(): Codec<
  BidInstructionDataArgs,
  BidInstructionData
> {
  return combineCodec(
    getBidInstructionDataEncoder(),
    getBidInstructionDataDecoder()
  );
}

export type BidAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountBidState extends string = string,
  TAccountOwner extends string = string,
  TAccountSharedEscrow extends string = string,
  TAccountCosigner extends string = string,
  TAccountRentPayer extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  bidState?: Address<TAccountBidState>;
  owner: TransactionSigner<TAccountOwner>;
  sharedEscrow?: Address<TAccountSharedEscrow>;
  cosigner?: TransactionSigner<TAccountCosigner>;
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  bidId?: BidInstructionDataArgs['bidId'];
  target: BidInstructionDataArgs['target'];
  targetId: BidInstructionDataArgs['targetId'];
  field?: BidInstructionDataArgs['field'];
  fieldId?: BidInstructionDataArgs['fieldId'];
  amount: BidInstructionDataArgs['amount'];
  quantity?: BidInstructionDataArgs['quantity'];
  expireInSec?: BidInstructionDataArgs['expireInSec'];
  currency?: BidInstructionDataArgs['currency'];
  privateTaker?: BidInstructionDataArgs['privateTaker'];
  makerBroker?: BidInstructionDataArgs['makerBroker'];
};

export async function getBidInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSharedEscrow extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
>(
  input: BidAsyncInput<
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSharedEscrow,
    TAccountCosigner,
    TAccountRentPayer
  >
): Promise<
  BidInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSharedEscrow,
    TAccountCosigner,
    TAccountRentPayer
  >
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    sharedEscrow: { value: input.sharedEscrow ?? null, isWritable: true },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!args.bidId) {
    args.bidId = await resolveBidIdOnCreate(resolverScope);
  }
  if (!accounts.bidState.value) {
    accounts.bidState.value = await findBidStatePda({
      owner: expectAddress(accounts.owner.value),
      bidId: expectSome(args.bidId),
    });
  }
  if (!accounts.sharedEscrow.value) {
    accounts.sharedEscrow.value = expectTransactionSigner(
      accounts.owner.value
    ).address;
  }
  if (!accounts.rentPayer.value) {
    accounts.rentPayer.value = expectSome(accounts.owner.value);
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sharedEscrow),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.rentPayer),
    ],
    programAddress,
    data: getBidInstructionDataEncoder().encode(args as BidInstructionDataArgs),
  } as BidInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSharedEscrow,
    TAccountCosigner,
    TAccountRentPayer
  >;

  return instruction;
}

export type BidInput<
  TAccountSystemProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountBidState extends string = string,
  TAccountOwner extends string = string,
  TAccountSharedEscrow extends string = string,
  TAccountCosigner extends string = string,
  TAccountRentPayer extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  bidState: Address<TAccountBidState>;
  owner: TransactionSigner<TAccountOwner>;
  sharedEscrow?: Address<TAccountSharedEscrow>;
  cosigner?: TransactionSigner<TAccountCosigner>;
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  bidId?: BidInstructionDataArgs['bidId'];
  target: BidInstructionDataArgs['target'];
  targetId: BidInstructionDataArgs['targetId'];
  field?: BidInstructionDataArgs['field'];
  fieldId?: BidInstructionDataArgs['fieldId'];
  amount: BidInstructionDataArgs['amount'];
  quantity?: BidInstructionDataArgs['quantity'];
  expireInSec?: BidInstructionDataArgs['expireInSec'];
  currency?: BidInstructionDataArgs['currency'];
  privateTaker?: BidInstructionDataArgs['privateTaker'];
  makerBroker?: BidInstructionDataArgs['makerBroker'];
};

export function getBidInstruction<
  TAccountSystemProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSharedEscrow extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
>(
  input: BidInput<
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSharedEscrow,
    TAccountCosigner,
    TAccountRentPayer
  >
): BidInstruction<
  typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSystemProgram,
  TAccountMarketplaceProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountSharedEscrow,
  TAccountCosigner,
  TAccountRentPayer
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    sharedEscrow: { value: input.sharedEscrow ?? null, isWritable: true },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!accounts.sharedEscrow.value) {
    accounts.sharedEscrow.value = expectTransactionSigner(
      accounts.owner.value
    ).address;
  }
  if (!accounts.rentPayer.value) {
    accounts.rentPayer.value = expectSome(accounts.owner.value);
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sharedEscrow),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.rentPayer),
    ],
    programAddress,
    data: getBidInstructionDataEncoder().encode(args as BidInstructionDataArgs),
  } as BidInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSharedEscrow,
    TAccountCosigner,
    TAccountRentPayer
  >;

  return instruction;
}

export type ParsedBidInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    marketplaceProgram: TAccountMetas[1];
    bidState: TAccountMetas[2];
    owner: TAccountMetas[3];
    sharedEscrow: TAccountMetas[4];
    cosigner?: TAccountMetas[5] | undefined;
    rentPayer: TAccountMetas[6];
  };
  data: BidInstructionData;
};

export function parseBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TENSOR_MARKETPLACE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      marketplaceProgram: getNextAccount(),
      bidState: getNextAccount(),
      owner: getNextAccount(),
      sharedEscrow: getNextAccount(),
      cosigner: getNextOptionalAccount(),
      rentPayer: getNextAccount(),
    },
    data: getBidInstructionDataDecoder().decode(instruction.data),
  };
}
