/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import { resolveOwnerToken } from '../../hooked';
import { findListStatePda, findListTokenPda } from '../pdas';
import { TENSOR_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  ResolvedAccount,
  expectAddress,
  expectSome,
  getAccountMetaFactory,
} from '../shared';

export type CloseExpiredListingT22Instruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountOwnerToken extends string | IAccountMeta<string> = string,
  TAccountListToken extends string | IAccountMeta<string> = string,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMarketplaceProgram extends
    | string
    | IAccountMeta<string> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountRentDestination extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwnerToken extends string
        ? WritableAccount<TAccountOwnerToken>
        : TAccountOwnerToken,
      TAccountListToken extends string
        ? WritableAccount<TAccountListToken>
        : TAccountListToken,
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMarketplaceProgram extends string
        ? ReadonlyAccount<TAccountMarketplaceProgram>
        : TAccountMarketplaceProgram,
      TAccountRentDestination extends string
        ? WritableAccount<TAccountRentDestination>
        : TAccountRentDestination,
      ...TRemainingAccounts,
    ]
  >;

export type CloseExpiredListingT22InstructionData = {
  discriminator: Array<number>;
};

export type CloseExpiredListingT22InstructionDataArgs = {};

export function getCloseExpiredListingT22InstructionDataEncoder(): Encoder<CloseExpiredListingT22InstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [69, 2, 190, 122, 144, 119, 122, 220],
    })
  );
}

export function getCloseExpiredListingT22InstructionDataDecoder(): Decoder<CloseExpiredListingT22InstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getCloseExpiredListingT22InstructionDataCodec(): Codec<
  CloseExpiredListingT22InstructionDataArgs,
  CloseExpiredListingT22InstructionData
> {
  return combineCodec(
    getCloseExpiredListingT22InstructionDataEncoder(),
    getCloseExpiredListingT22InstructionDataDecoder()
  );
}

export type CloseExpiredListingT22AsyncInput<
  TAccountOwnerToken extends string = string,
  TAccountListToken extends string = string,
  TAccountListState extends string = string,
  TAccountMint extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountRentDestination extends string = string,
> = {
  ownerToken?: Address<TAccountOwnerToken>;
  listToken?: Address<TAccountListToken>;
  listState?: Address<TAccountListState>;
  mint: Address<TAccountMint>;
  owner: Address<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  rentDestination?: Address<TAccountRentDestination>;
};

export async function getCloseExpiredListingT22InstructionAsync<
  TAccountOwnerToken extends string,
  TAccountListToken extends string,
  TAccountListState extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountRentDestination extends string,
>(
  input: CloseExpiredListingT22AsyncInput<
    TAccountOwnerToken,
    TAccountListToken,
    TAccountListState,
    TAccountMint,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountRentDestination
  >
): Promise<
  CloseExpiredListingT22Instruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountOwnerToken,
    TAccountListToken,
    TAccountListState,
    TAccountMint,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountRentDestination
  >
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ownerToken: { value: input.ownerToken ?? null, isWritable: true },
    listToken: { value: input.listToken ?? null, isWritable: true },
    listState: { value: input.listState ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    rentDestination: { value: input.rentDestination ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolver scope.
  const resolverScope = { programAddress, accounts };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.ownerToken.value) {
    accounts.ownerToken = {
      ...accounts.ownerToken,
      ...(await resolveOwnerToken(resolverScope)),
    };
  }
  if (!accounts.listToken.value) {
    accounts.listToken.value = await findListTokenPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.listState.value) {
    accounts.listState.value = await findListStatePda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!accounts.rentDestination.value) {
    accounts.rentDestination.value = expectSome(accounts.owner.value);
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ownerToken),
      getAccountMeta(accounts.listToken),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.rentDestination),
    ],
    programAddress,
    data: getCloseExpiredListingT22InstructionDataEncoder().encode({}),
  } as CloseExpiredListingT22Instruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountOwnerToken,
    TAccountListToken,
    TAccountListState,
    TAccountMint,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountRentDestination
  >;

  return instruction;
}

export type CloseExpiredListingT22Input<
  TAccountOwnerToken extends string = string,
  TAccountListToken extends string = string,
  TAccountListState extends string = string,
  TAccountMint extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMarketplaceProgram extends string = string,
  TAccountRentDestination extends string = string,
> = {
  ownerToken: Address<TAccountOwnerToken>;
  listToken: Address<TAccountListToken>;
  listState: Address<TAccountListState>;
  mint: Address<TAccountMint>;
  owner: Address<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  marketplaceProgram?: Address<TAccountMarketplaceProgram>;
  rentDestination?: Address<TAccountRentDestination>;
};

export function getCloseExpiredListingT22Instruction<
  TAccountOwnerToken extends string,
  TAccountListToken extends string,
  TAccountListState extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarketplaceProgram extends string,
  TAccountRentDestination extends string,
>(
  input: CloseExpiredListingT22Input<
    TAccountOwnerToken,
    TAccountListToken,
    TAccountListState,
    TAccountMint,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountRentDestination
  >
): CloseExpiredListingT22Instruction<
  typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountOwnerToken,
  TAccountListToken,
  TAccountListState,
  TAccountMint,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountMarketplaceProgram,
  TAccountRentDestination
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ownerToken: { value: input.ownerToken ?? null, isWritable: true },
    listToken: { value: input.listToken ?? null, isWritable: true },
    listState: { value: input.listState ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    marketplaceProgram: {
      value: input.marketplaceProgram ?? null,
      isWritable: false,
    },
    rentDestination: { value: input.rentDestination ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.marketplaceProgram.value) {
    accounts.marketplaceProgram.value =
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;
  }
  if (!accounts.rentDestination.value) {
    accounts.rentDestination.value = expectSome(accounts.owner.value);
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ownerToken),
      getAccountMeta(accounts.listToken),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.marketplaceProgram),
      getAccountMeta(accounts.rentDestination),
    ],
    programAddress,
    data: getCloseExpiredListingT22InstructionDataEncoder().encode({}),
  } as CloseExpiredListingT22Instruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountOwnerToken,
    TAccountListToken,
    TAccountListState,
    TAccountMint,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarketplaceProgram,
    TAccountRentDestination
  >;

  return instruction;
}

export type ParsedCloseExpiredListingT22Instruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ownerToken: TAccountMetas[0];
    listToken: TAccountMetas[1];
    listState: TAccountMetas[2];
    mint: TAccountMetas[3];
    owner: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    marketplaceProgram: TAccountMetas[7];
    rentDestination: TAccountMetas[8];
  };
  data: CloseExpiredListingT22InstructionData;
};

export function parseCloseExpiredListingT22Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseExpiredListingT22Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ownerToken: getNextAccount(),
      listToken: getNextAccount(),
      listState: getNextAccount(),
      mint: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      marketplaceProgram: getNextAccount(),
      rentDestination: getNextAccount(),
    },
    data: getCloseExpiredListingT22InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
