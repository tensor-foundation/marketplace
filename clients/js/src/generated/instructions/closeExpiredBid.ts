/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import { TENSOR_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type CloseExpiredBidInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountRentDest extends string
        ? WritableAccount<TAccountRentDest>
        : TAccountRentDest,
      ...TRemainingAccounts,
    ]
  >;

export type CloseExpiredBidInstructionData = { discriminator: Array<number> };

export type CloseExpiredBidInstructionDataArgs = {};

export function getCloseExpiredBidInstructionDataEncoder(): Encoder<CloseExpiredBidInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [83, 20, 105, 67, 248, 68, 104, 190],
    })
  );
}

export function getCloseExpiredBidInstructionDataDecoder(): Decoder<CloseExpiredBidInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getCloseExpiredBidInstructionDataCodec(): Codec<
  CloseExpiredBidInstructionDataArgs,
  CloseExpiredBidInstructionData
> {
  return combineCodec(
    getCloseExpiredBidInstructionDataEncoder(),
    getCloseExpiredBidInstructionDataDecoder()
  );
}

export type CloseExpiredBidInput<
  TAccountBidState extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountRentDest extends string = string,
> = {
  bidState: Address<TAccountBidState>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  rentDest: Address<TAccountRentDest>;
};

export function getCloseExpiredBidInstruction<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string,
>(
  input: CloseExpiredBidInput<
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >
): CloseExpiredBidInstruction<
  typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountBidState,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountRentDest
> {
  // Program address.
  const programAddress = TENSOR_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    rentDest: { value: input.rentDest ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.rentDest),
    ],
    programAddress,
    data: getCloseExpiredBidInstructionDataEncoder().encode({}),
  } as CloseExpiredBidInstruction<
    typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >;

  return instruction;
}

export type ParsedCloseExpiredBidInstruction<
  TProgram extends string = typeof TENSOR_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    bidState: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    tcompProgram: TAccountMetas[3];
    rentDest: TAccountMetas[4];
  };
  data: CloseExpiredBidInstructionData;
};

export function parseCloseExpiredBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseExpiredBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bidState: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      rentDest: getNextAccount(),
    },
    data: getCloseExpiredBidInstructionDataDecoder().decode(instruction.data),
  };
}
