/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getMakeEventDecoder,
  getMakeEventEncoder,
  getTakeEventDecoder,
  getTakeEventEncoder,
  type MakeEvent,
  type MakeEventArgs,
  type TakeEvent,
  type TakeEventArgs,
} from '.';

export type TcompEvent =
  | { __kind: 'Maker'; fields: readonly [MakeEvent] }
  | { __kind: 'Taker'; fields: readonly [TakeEvent] };

export type TcompEventArgs =
  | { __kind: 'Maker'; fields: readonly [MakeEventArgs] }
  | { __kind: 'Taker'; fields: readonly [TakeEventArgs] };

export function getTcompEventEncoder(): Encoder<TcompEventArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Maker',
      getStructEncoder([['fields', getTupleEncoder([getMakeEventEncoder()])]]),
    ],
    [
      'Taker',
      getStructEncoder([['fields', getTupleEncoder([getTakeEventEncoder()])]]),
    ],
  ]);
}

export function getTcompEventDecoder(): Decoder<TcompEvent> {
  return getDiscriminatedUnionDecoder([
    [
      'Maker',
      getStructDecoder([['fields', getTupleDecoder([getMakeEventDecoder()])]]),
    ],
    [
      'Taker',
      getStructDecoder([['fields', getTupleDecoder([getTakeEventDecoder()])]]),
    ],
  ]);
}

export function getTcompEventCodec(): Codec<TcompEventArgs, TcompEvent> {
  return combineCodec(getTcompEventEncoder(), getTcompEventDecoder());
}

// Data Enum Helpers.
export function tcompEvent(
  kind: 'Maker',
  data: GetDiscriminatedUnionVariantContent<
    TcompEventArgs,
    '__kind',
    'Maker'
  >['fields']
): GetDiscriminatedUnionVariant<TcompEventArgs, '__kind', 'Maker'>;
export function tcompEvent(
  kind: 'Taker',
  data: GetDiscriminatedUnionVariantContent<
    TcompEventArgs,
    '__kind',
    'Taker'
  >['fields']
): GetDiscriminatedUnionVariant<TcompEventArgs, '__kind', 'Taker'>;
export function tcompEvent<K extends TcompEventArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTcompEvent<K extends TcompEvent['__kind']>(
  kind: K,
  value: TcompEvent
): value is TcompEvent & { __kind: K } {
  return value.__kind === kind;
}
