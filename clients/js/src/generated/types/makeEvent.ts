/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/web3.js';
import {
  getFieldDecoder,
  getFieldEncoder,
  getTargetDecoder,
  getTargetEncoder,
  type Field,
  type FieldArgs,
  type Target,
  type TargetArgs,
} from '.';

export type MakeEvent = {
  maker: Address;
  bidId: Option<Address>;
  target: Target;
  targetId: Address;
  field: Option<Field>;
  fieldId: Option<Address>;
  amount: bigint;
  quantity: number;
  currency: Option<Address>;
  expiry: bigint;
  privateTaker: Option<Address>;
  assetId: Option<Address>;
};

export type MakeEventArgs = {
  maker: Address;
  bidId: OptionOrNullable<Address>;
  target: TargetArgs;
  targetId: Address;
  field: OptionOrNullable<FieldArgs>;
  fieldId: OptionOrNullable<Address>;
  amount: number | bigint;
  quantity?: number;
  currency: OptionOrNullable<Address>;
  expiry: number | bigint;
  privateTaker: OptionOrNullable<Address>;
  assetId: OptionOrNullable<Address>;
};

export function getMakeEventEncoder(): Encoder<MakeEventArgs> {
  return transformEncoder(
    getStructEncoder([
      ['maker', getAddressEncoder()],
      ['bidId', getOptionEncoder(getAddressEncoder())],
      ['target', getTargetEncoder()],
      ['targetId', getAddressEncoder()],
      ['field', getOptionEncoder(getFieldEncoder())],
      ['fieldId', getOptionEncoder(getAddressEncoder())],
      ['amount', getU64Encoder()],
      ['quantity', getU32Encoder()],
      ['currency', getOptionEncoder(getAddressEncoder())],
      ['expiry', getI64Encoder()],
      ['privateTaker', getOptionEncoder(getAddressEncoder())],
      ['assetId', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, quantity: value.quantity ?? 1 })
  );
}

export function getMakeEventDecoder(): Decoder<MakeEvent> {
  return getStructDecoder([
    ['maker', getAddressDecoder()],
    ['bidId', getOptionDecoder(getAddressDecoder())],
    ['target', getTargetDecoder()],
    ['targetId', getAddressDecoder()],
    ['field', getOptionDecoder(getFieldDecoder())],
    ['fieldId', getOptionDecoder(getAddressDecoder())],
    ['amount', getU64Decoder()],
    ['quantity', getU32Decoder()],
    ['currency', getOptionDecoder(getAddressDecoder())],
    ['expiry', getI64Decoder()],
    ['privateTaker', getOptionDecoder(getAddressDecoder())],
    ['assetId', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getMakeEventCodec(): Codec<MakeEventArgs, MakeEvent> {
  return combineCodec(getMakeEventEncoder(), getMakeEventDecoder());
}
