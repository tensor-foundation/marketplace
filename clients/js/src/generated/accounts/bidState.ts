/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getNullableAddressDecoder,
  getNullableAddressEncoder,
  type NullableAddress,
  type NullableAddressArgs,
} from '../../hooked';
import { BidStateSeeds, findBidStatePda } from '../pdas';
import {
  getFieldDecoder,
  getFieldEncoder,
  getTargetDecoder,
  getTargetEncoder,
  type Field,
  type FieldArgs,
  type Target,
  type TargetArgs,
} from '../types';

export type BidState = {
  discriminator: ReadonlyUint8Array;
  version: number;
  bump: Array<number>;
  owner: Address;
  /** Randomly picked pubkey used in bid seeds. To avoid dangling bids can use assetId here. */
  bidId: Address;
  target: Target;
  targetId: Address;
  field: Option<Field>;
  fieldId: Option<Address>;
  quantity: number;
  filledQuantity: number;
  amount: bigint;
  currency: Option<Address>;
  expiry: bigint;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
  margin: Option<Address>;
  updatedAt: bigint;
  /**
   * Cosigner
   * Default Pubkey represents a None value.
   */
  cosigner: NullableAddress;
  /**
   * Owner is the rent payer when this is None.
   * Default Pubkey represents a None value.
   */
  rentPayer: NullableAddress;
  reserved: Array<number>;
  reserved1: Array<number>;
  reserved2: ReadonlyUint8Array;
};

export type BidStateArgs = {
  version: number;
  bump: Array<number>;
  owner: Address;
  /** Randomly picked pubkey used in bid seeds. To avoid dangling bids can use assetId here. */
  bidId: Address;
  target: TargetArgs;
  targetId: Address;
  field: OptionOrNullable<FieldArgs>;
  fieldId: OptionOrNullable<Address>;
  quantity?: number;
  filledQuantity: number;
  amount: number | bigint;
  currency: OptionOrNullable<Address>;
  expiry: number | bigint;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
  margin: OptionOrNullable<Address>;
  updatedAt: number | bigint;
  /**
   * Cosigner
   * Default Pubkey represents a None value.
   */
  cosigner: NullableAddressArgs;
  /**
   * Owner is the rent payer when this is None.
   * Default Pubkey represents a None value.
   */
  rentPayer: NullableAddressArgs;
  reserved: Array<number>;
  reserved1: Array<number>;
  reserved2: ReadonlyUint8Array;
};

export function getBidStateEncoder(): Encoder<BidStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU8Encoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['owner', getAddressEncoder()],
      ['bidId', getAddressEncoder()],
      ['target', getTargetEncoder()],
      ['targetId', getAddressEncoder()],
      ['field', getOptionEncoder(getFieldEncoder())],
      ['fieldId', getOptionEncoder(getAddressEncoder())],
      ['quantity', getU32Encoder()],
      ['filledQuantity', getU32Encoder()],
      ['amount', getU64Encoder()],
      ['currency', getOptionEncoder(getAddressEncoder())],
      ['expiry', getI64Encoder()],
      ['privateTaker', getOptionEncoder(getAddressEncoder())],
      ['makerBroker', getOptionEncoder(getAddressEncoder())],
      ['margin', getOptionEncoder(getAddressEncoder())],
      ['updatedAt', getI64Encoder()],
      ['cosigner', getNullableAddressEncoder()],
      ['rentPayer', getNullableAddressEncoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['reserved1', getArrayEncoder(getU8Encoder(), { size: 16 })],
      ['reserved2', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([155, 197, 5, 97, 189, 60, 8, 183]),
      quantity: value.quantity ?? 1,
    })
  );
}

export function getBidStateDecoder(): Decoder<BidState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU8Decoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['owner', getAddressDecoder()],
    ['bidId', getAddressDecoder()],
    ['target', getTargetDecoder()],
    ['targetId', getAddressDecoder()],
    ['field', getOptionDecoder(getFieldDecoder())],
    ['fieldId', getOptionDecoder(getAddressDecoder())],
    ['quantity', getU32Decoder()],
    ['filledQuantity', getU32Decoder()],
    ['amount', getU64Decoder()],
    ['currency', getOptionDecoder(getAddressDecoder())],
    ['expiry', getI64Decoder()],
    ['privateTaker', getOptionDecoder(getAddressDecoder())],
    ['makerBroker', getOptionDecoder(getAddressDecoder())],
    ['margin', getOptionDecoder(getAddressDecoder())],
    ['updatedAt', getI64Decoder()],
    ['cosigner', getNullableAddressDecoder()],
    ['rentPayer', getNullableAddressDecoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['reserved1', getArrayDecoder(getU8Decoder(), { size: 16 })],
    ['reserved2', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getBidStateCodec(): Codec<BidStateArgs, BidState> {
  return combineCodec(getBidStateEncoder(), getBidStateDecoder());
}

export function decodeBidState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BidState, TAddress>;
export function decodeBidState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BidState, TAddress>;
export function decodeBidState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<BidState, TAddress> | MaybeAccount<BidState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBidStateDecoder()
  );
}

export async function fetchBidState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BidState, TAddress>> {
  const maybeAccount = await fetchMaybeBidState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBidState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BidState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBidState(maybeAccount);
}

export async function fetchAllBidState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BidState>[]> {
  const maybeAccounts = await fetchAllMaybeBidState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBidState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BidState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBidState(maybeAccount));
}

export async function fetchBidStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: BidStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<BidState>> {
  const maybeAccount = await fetchMaybeBidStateFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBidStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: BidStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<BidState>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findBidStatePda(seeds, { programAddress });
  return await fetchMaybeBidState(rpc, address, fetchConfig);
}
