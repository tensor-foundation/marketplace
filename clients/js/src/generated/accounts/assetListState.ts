/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { AssetListStateSeeds, findAssetListStatePda } from '../pdas';

export type AssetListState = { discriminator: ReadonlyUint8Array };

export type AssetListStateArgs = {};

export function getAssetListStateEncoder(): Encoder<AssetListStateArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([65, 195, 176, 188, 72, 18, 65, 77]),
    })
  );
}

export function getAssetListStateDecoder(): Decoder<AssetListState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAssetListStateCodec(): Codec<
  AssetListStateArgs,
  AssetListState
> {
  return combineCodec(getAssetListStateEncoder(), getAssetListStateDecoder());
}

export function decodeAssetListState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AssetListState, TAddress>;
export function decodeAssetListState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AssetListState, TAddress>;
export function decodeAssetListState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AssetListState, TAddress> | MaybeAccount<AssetListState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAssetListStateDecoder()
  );
}

export async function fetchAssetListState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AssetListState, TAddress>> {
  const maybeAccount = await fetchMaybeAssetListState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAssetListState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AssetListState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAssetListState(maybeAccount);
}

export async function fetchAllAssetListState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AssetListState>[]> {
  const maybeAccounts = await fetchAllMaybeAssetListState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAssetListState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AssetListState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAssetListState(maybeAccount)
  );
}

export function getAssetListStateSize(): number {
  return 8;
}

export async function fetchAssetListStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AssetListStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<AssetListState>> {
  const maybeAccount = await fetchMaybeAssetListStateFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAssetListStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AssetListStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<AssetListState>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findAssetListStatePda(seeds, { programAddress });
  return await fetchMaybeAssetListState(rpc, address, fetchConfig);
}
