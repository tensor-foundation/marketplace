//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct BuySpl {
    pub tcomp: solana_program::pubkey::Pubkey,

    pub tcomp_ata: solana_program::pubkey::Pubkey,

    pub tree_authority: solana_program::pubkey::Pubkey,

    pub merkle_tree: solana_program::pubkey::Pubkey,

    pub log_wrapper: solana_program::pubkey::Pubkey,

    pub compression_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub bubblegum_program: solana_program::pubkey::Pubkey,

    pub tcomp_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub list_state: solana_program::pubkey::Pubkey,

    pub buyer: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub payer_source: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub owner_dest: solana_program::pubkey::Pubkey,

    pub currency: solana_program::pubkey::Pubkey,

    pub taker_broker: Option<solana_program::pubkey::Pubkey>,

    pub taker_broker_ata: Option<solana_program::pubkey::Pubkey>,

    pub maker_broker: Option<solana_program::pubkey::Pubkey>,

    pub maker_broker_ata: Option<solana_program::pubkey::Pubkey>,

    pub rent_dest: solana_program::pubkey::Pubkey,

    pub rent_payer: solana_program::pubkey::Pubkey,
}

impl BuySpl {
    pub fn instruction(
        &self,
        args: BuySplInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BuySplInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tcomp, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tcomp_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tree_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_tree,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.log_wrapper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.compression_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.bubblegum_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tcomp_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.list_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.buyer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer_source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner_dest,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.currency,
            false,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                taker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(taker_broker_ata) = self.taker_broker_ata {
            accounts.push(solana_program::instruction::AccountMeta::new(
                taker_broker_ata,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                maker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker_ata) = self.maker_broker_ata {
            accounts.push(solana_program::instruction::AccountMeta::new(
                maker_broker_ata,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_dest,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_payer,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = BuySplInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct BuySplInstructionData {
    discriminator: [u8; 8],
}

impl BuySplInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [65, 136, 254, 255, 59, 130, 234, 174],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuySplInstructionArgs {
    pub nonce: u64,
    pub index: u32,
    pub root: [u8; 32],
    pub meta_hash: [u8; 32],
    pub creator_shares: Vec<u8>,
    pub creator_verified: Vec<bool>,
    pub seller_fee_basis_points: u16,
    pub max_amount: u64,
    pub optional_royalty_pct: Option<u16>,
}

/// Instruction builder for `BuySpl`.
///
/// ### Accounts:
///
///   0. `[writable]` tcomp
///   1. `[writable]` tcomp_ata
///   2. `[]` tree_authority
///   3. `[writable]` merkle_tree
///   4. `[]` log_wrapper
///   5. `[]` compression_program
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   7. `[]` bubblegum_program
///   8. `[]` tcomp_program
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   11. `[writable]` list_state
///   12. `[]` buyer
///   13. `[signer]` payer
///   14. `[writable]` payer_source
///   15. `[]` owner
///   16. `[writable]` owner_dest
///   17. `[]` currency
///   18. `[writable, optional]` taker_broker
///   19. `[writable, optional]` taker_broker_ata
///   20. `[writable, optional]` maker_broker
///   21. `[writable, optional]` maker_broker_ata
///   22. `[writable]` rent_dest
///   23. `[writable, signer]` rent_payer
#[derive(Default)]
pub struct BuySplBuilder {
    tcomp: Option<solana_program::pubkey::Pubkey>,
    tcomp_ata: Option<solana_program::pubkey::Pubkey>,
    tree_authority: Option<solana_program::pubkey::Pubkey>,
    merkle_tree: Option<solana_program::pubkey::Pubkey>,
    log_wrapper: Option<solana_program::pubkey::Pubkey>,
    compression_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    bubblegum_program: Option<solana_program::pubkey::Pubkey>,
    tcomp_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    list_state: Option<solana_program::pubkey::Pubkey>,
    buyer: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    payer_source: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    owner_dest: Option<solana_program::pubkey::Pubkey>,
    currency: Option<solana_program::pubkey::Pubkey>,
    taker_broker: Option<solana_program::pubkey::Pubkey>,
    taker_broker_ata: Option<solana_program::pubkey::Pubkey>,
    maker_broker: Option<solana_program::pubkey::Pubkey>,
    maker_broker_ata: Option<solana_program::pubkey::Pubkey>,
    rent_dest: Option<solana_program::pubkey::Pubkey>,
    rent_payer: Option<solana_program::pubkey::Pubkey>,
    nonce: Option<u64>,
    index: Option<u32>,
    root: Option<[u8; 32]>,
    meta_hash: Option<[u8; 32]>,
    creator_shares: Option<Vec<u8>>,
    creator_verified: Option<Vec<bool>>,
    seller_fee_basis_points: Option<u16>,
    max_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BuySplBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn tcomp(&mut self, tcomp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tcomp = Some(tcomp);
        self
    }
    #[inline(always)]
    pub fn tcomp_ata(&mut self, tcomp_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tcomp_ata = Some(tcomp_ata);
        self
    }
    #[inline(always)]
    pub fn tree_authority(&mut self, tree_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tree_authority = Some(tree_authority);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(&mut self, merkle_tree: solana_program::pubkey::Pubkey) -> &mut Self {
        self.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.log_wrapper = Some(log_wrapper);
        self
    }
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.compression_program = Some(compression_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bubblegum_program(
        &mut self,
        bubblegum_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bubblegum_program = Some(bubblegum_program);
        self
    }
    #[inline(always)]
    pub fn tcomp_program(&mut self, tcomp_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tcomp_program = Some(tcomp_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn list_state(&mut self, list_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.list_state = Some(list_state);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn payer_source(&mut self, payer_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer_source = Some(payer_source);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn owner_dest(&mut self, owner_dest: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner_dest = Some(owner_dest);
        self
    }
    #[inline(always)]
    pub fn currency(&mut self, currency: solana_program::pubkey::Pubkey) -> &mut Self {
        self.currency = Some(currency);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker_ata(
        &mut self,
        taker_broker_ata: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.taker_broker_ata = taker_broker_ata;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_broker = maker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker_ata(
        &mut self,
        maker_broker_ata: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_broker_ata = maker_broker_ata;
        self
    }
    #[inline(always)]
    pub fn rent_dest(&mut self, rent_dest: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_dest = Some(rent_dest);
        self
    }
    #[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_payer = Some(rent_payer);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn meta_hash(&mut self, meta_hash: [u8; 32]) -> &mut Self {
        self.meta_hash = Some(meta_hash);
        self
    }
    #[inline(always)]
    pub fn creator_shares(&mut self, creator_shares: Vec<u8>) -> &mut Self {
        self.creator_shares = Some(creator_shares);
        self
    }
    #[inline(always)]
    pub fn creator_verified(&mut self, creator_verified: Vec<bool>) -> &mut Self {
        self.creator_verified = Some(creator_verified);
        self
    }
    #[inline(always)]
    pub fn seller_fee_basis_points(&mut self, seller_fee_basis_points: u16) -> &mut Self {
        self.seller_fee_basis_points = Some(seller_fee_basis_points);
        self
    }
    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.max_amount = Some(max_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BuySpl {
            tcomp: self.tcomp.expect("tcomp is not set"),
            tcomp_ata: self.tcomp_ata.expect("tcomp_ata is not set"),
            tree_authority: self.tree_authority.expect("tree_authority is not set"),
            merkle_tree: self.merkle_tree.expect("merkle_tree is not set"),
            log_wrapper: self.log_wrapper.expect("log_wrapper is not set"),
            compression_program: self
                .compression_program
                .expect("compression_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            bubblegum_program: self
                .bubblegum_program
                .expect("bubblegum_program is not set"),
            tcomp_program: self.tcomp_program.expect("tcomp_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            list_state: self.list_state.expect("list_state is not set"),
            buyer: self.buyer.expect("buyer is not set"),
            payer: self.payer.expect("payer is not set"),
            payer_source: self.payer_source.expect("payer_source is not set"),
            owner: self.owner.expect("owner is not set"),
            owner_dest: self.owner_dest.expect("owner_dest is not set"),
            currency: self.currency.expect("currency is not set"),
            taker_broker: self.taker_broker,
            taker_broker_ata: self.taker_broker_ata,
            maker_broker: self.maker_broker,
            maker_broker_ata: self.maker_broker_ata,
            rent_dest: self.rent_dest.expect("rent_dest is not set"),
            rent_payer: self.rent_payer.expect("rent_payer is not set"),
        };
        let args = BuySplInstructionArgs {
            nonce: self.nonce.clone().expect("nonce is not set"),
            index: self.index.clone().expect("index is not set"),
            root: self.root.clone().expect("root is not set"),
            meta_hash: self.meta_hash.clone().expect("meta_hash is not set"),
            creator_shares: self
                .creator_shares
                .clone()
                .expect("creator_shares is not set"),
            creator_verified: self
                .creator_verified
                .clone()
                .expect("creator_verified is not set"),
            seller_fee_basis_points: self
                .seller_fee_basis_points
                .clone()
                .expect("seller_fee_basis_points is not set"),
            max_amount: self.max_amount.clone().expect("max_amount is not set"),
            optional_royalty_pct: self.optional_royalty_pct.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `buy_spl` CPI accounts.
pub struct BuySplCpiAccounts<'a, 'b> {
    pub tcomp: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner_dest: &'b solana_program::account_info::AccountInfo<'a>,

    pub currency: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub taker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_dest: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `buy_spl` CPI instruction.
pub struct BuySplCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner_dest: &'b solana_program::account_info::AccountInfo<'a>,

    pub currency: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub taker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_dest: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: BuySplInstructionArgs,
}

impl<'a, 'b> BuySplCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BuySplCpiAccounts<'a, 'b>,
        args: BuySplInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            tcomp: accounts.tcomp,
            tcomp_ata: accounts.tcomp_ata,
            tree_authority: accounts.tree_authority,
            merkle_tree: accounts.merkle_tree,
            log_wrapper: accounts.log_wrapper,
            compression_program: accounts.compression_program,
            system_program: accounts.system_program,
            bubblegum_program: accounts.bubblegum_program,
            tcomp_program: accounts.tcomp_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            list_state: accounts.list_state,
            buyer: accounts.buyer,
            payer: accounts.payer,
            payer_source: accounts.payer_source,
            owner: accounts.owner,
            owner_dest: accounts.owner_dest,
            currency: accounts.currency,
            taker_broker: accounts.taker_broker,
            taker_broker_ata: accounts.taker_broker_ata,
            maker_broker: accounts.maker_broker,
            maker_broker_ata: accounts.maker_broker_ata,
            rent_dest: accounts.rent_dest,
            rent_payer: accounts.rent_payer,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tcomp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tcomp_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tree_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_tree.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.log_wrapper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.compression_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bubblegum_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tcomp_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.list_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.buyer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer_source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner_dest.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.currency.key,
            false,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *taker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(taker_broker_ata) = self.taker_broker_ata {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *taker_broker_ata.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *maker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker_ata) = self.maker_broker_ata {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *maker_broker_ata.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_dest.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_payer.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = BuySplInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(24 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.tcomp.clone());
        account_infos.push(self.tcomp_ata.clone());
        account_infos.push(self.tree_authority.clone());
        account_infos.push(self.merkle_tree.clone());
        account_infos.push(self.log_wrapper.clone());
        account_infos.push(self.compression_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.bubblegum_program.clone());
        account_infos.push(self.tcomp_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.list_state.clone());
        account_infos.push(self.buyer.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.payer_source.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.owner_dest.clone());
        account_infos.push(self.currency.clone());
        if let Some(taker_broker) = self.taker_broker {
            account_infos.push(taker_broker.clone());
        }
        if let Some(taker_broker_ata) = self.taker_broker_ata {
            account_infos.push(taker_broker_ata.clone());
        }
        if let Some(maker_broker) = self.maker_broker {
            account_infos.push(maker_broker.clone());
        }
        if let Some(maker_broker_ata) = self.maker_broker_ata {
            account_infos.push(maker_broker_ata.clone());
        }
        account_infos.push(self.rent_dest.clone());
        account_infos.push(self.rent_payer.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BuySpl` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` tcomp
///   1. `[writable]` tcomp_ata
///   2. `[]` tree_authority
///   3. `[writable]` merkle_tree
///   4. `[]` log_wrapper
///   5. `[]` compression_program
///   6. `[]` system_program
///   7. `[]` bubblegum_program
///   8. `[]` tcomp_program
///   9. `[]` token_program
///   10. `[]` associated_token_program
///   11. `[writable]` list_state
///   12. `[]` buyer
///   13. `[signer]` payer
///   14. `[writable]` payer_source
///   15. `[]` owner
///   16. `[writable]` owner_dest
///   17. `[]` currency
///   18. `[writable, optional]` taker_broker
///   19. `[writable, optional]` taker_broker_ata
///   20. `[writable, optional]` maker_broker
///   21. `[writable, optional]` maker_broker_ata
///   22. `[writable]` rent_dest
///   23. `[writable, signer]` rent_payer
pub struct BuySplCpiBuilder<'a, 'b> {
    instruction: Box<BuySplCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BuySplCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BuySplCpiBuilderInstruction {
            __program: program,
            tcomp: None,
            tcomp_ata: None,
            tree_authority: None,
            merkle_tree: None,
            log_wrapper: None,
            compression_program: None,
            system_program: None,
            bubblegum_program: None,
            tcomp_program: None,
            token_program: None,
            associated_token_program: None,
            list_state: None,
            buyer: None,
            payer: None,
            payer_source: None,
            owner: None,
            owner_dest: None,
            currency: None,
            taker_broker: None,
            taker_broker_ata: None,
            maker_broker: None,
            maker_broker_ata: None,
            rent_dest: None,
            rent_payer: None,
            nonce: None,
            index: None,
            root: None,
            meta_hash: None,
            creator_shares: None,
            creator_verified: None,
            seller_fee_basis_points: None,
            max_amount: None,
            optional_royalty_pct: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn tcomp(&mut self, tcomp: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.tcomp = Some(tcomp);
        self
    }
    #[inline(always)]
    pub fn tcomp_ata(
        &mut self,
        tcomp_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tcomp_ata = Some(tcomp_ata);
        self
    }
    #[inline(always)]
    pub fn tree_authority(
        &mut self,
        tree_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tree_authority = Some(tree_authority);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(
        &mut self,
        merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn log_wrapper(
        &mut self,
        log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.log_wrapper = Some(log_wrapper);
        self
    }
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.compression_program = Some(compression_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bubblegum_program(
        &mut self,
        bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bubblegum_program = Some(bubblegum_program);
        self
    }
    #[inline(always)]
    pub fn tcomp_program(
        &mut self,
        tcomp_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tcomp_program = Some(tcomp_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn list_state(
        &mut self,
        list_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.list_state = Some(list_state);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn payer_source(
        &mut self,
        payer_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_source = Some(payer_source);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn owner_dest(
        &mut self,
        owner_dest: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owner_dest = Some(owner_dest);
        self
    }
    #[inline(always)]
    pub fn currency(
        &mut self,
        currency: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.currency = Some(currency);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker_ata(
        &mut self,
        taker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.taker_broker_ata = taker_broker_ata;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_broker = maker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker_ata(
        &mut self,
        maker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_broker_ata = maker_broker_ata;
        self
    }
    #[inline(always)]
    pub fn rent_dest(
        &mut self,
        rent_dest: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_dest = Some(rent_dest);
        self
    }
    #[inline(always)]
    pub fn rent_payer(
        &mut self,
        rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_payer = Some(rent_payer);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.instruction.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.instruction.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn meta_hash(&mut self, meta_hash: [u8; 32]) -> &mut Self {
        self.instruction.meta_hash = Some(meta_hash);
        self
    }
    #[inline(always)]
    pub fn creator_shares(&mut self, creator_shares: Vec<u8>) -> &mut Self {
        self.instruction.creator_shares = Some(creator_shares);
        self
    }
    #[inline(always)]
    pub fn creator_verified(&mut self, creator_verified: Vec<bool>) -> &mut Self {
        self.instruction.creator_verified = Some(creator_verified);
        self
    }
    #[inline(always)]
    pub fn seller_fee_basis_points(&mut self, seller_fee_basis_points: u16) -> &mut Self {
        self.instruction.seller_fee_basis_points = Some(seller_fee_basis_points);
        self
    }
    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.instruction.max_amount = Some(max_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.instruction.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BuySplInstructionArgs {
            nonce: self.instruction.nonce.clone().expect("nonce is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
            root: self.instruction.root.clone().expect("root is not set"),
            meta_hash: self
                .instruction
                .meta_hash
                .clone()
                .expect("meta_hash is not set"),
            creator_shares: self
                .instruction
                .creator_shares
                .clone()
                .expect("creator_shares is not set"),
            creator_verified: self
                .instruction
                .creator_verified
                .clone()
                .expect("creator_verified is not set"),
            seller_fee_basis_points: self
                .instruction
                .seller_fee_basis_points
                .clone()
                .expect("seller_fee_basis_points is not set"),
            max_amount: self
                .instruction
                .max_amount
                .clone()
                .expect("max_amount is not set"),
            optional_royalty_pct: self.instruction.optional_royalty_pct.clone(),
        };
        let instruction = BuySplCpi {
            __program: self.instruction.__program,

            tcomp: self.instruction.tcomp.expect("tcomp is not set"),

            tcomp_ata: self.instruction.tcomp_ata.expect("tcomp_ata is not set"),

            tree_authority: self
                .instruction
                .tree_authority
                .expect("tree_authority is not set"),

            merkle_tree: self
                .instruction
                .merkle_tree
                .expect("merkle_tree is not set"),

            log_wrapper: self
                .instruction
                .log_wrapper
                .expect("log_wrapper is not set"),

            compression_program: self
                .instruction
                .compression_program
                .expect("compression_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            bubblegum_program: self
                .instruction
                .bubblegum_program
                .expect("bubblegum_program is not set"),

            tcomp_program: self
                .instruction
                .tcomp_program
                .expect("tcomp_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            list_state: self.instruction.list_state.expect("list_state is not set"),

            buyer: self.instruction.buyer.expect("buyer is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            payer_source: self
                .instruction
                .payer_source
                .expect("payer_source is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            owner_dest: self.instruction.owner_dest.expect("owner_dest is not set"),

            currency: self.instruction.currency.expect("currency is not set"),

            taker_broker: self.instruction.taker_broker,

            taker_broker_ata: self.instruction.taker_broker_ata,

            maker_broker: self.instruction.maker_broker,

            maker_broker_ata: self.instruction.maker_broker_ata,

            rent_dest: self.instruction.rent_dest.expect("rent_dest is not set"),

            rent_payer: self.instruction.rent_payer.expect("rent_payer is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct BuySplCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    tcomp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tcomp_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tree_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    merkle_tree: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    compression_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bubblegum_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tcomp_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    list_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner_dest: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    currency: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    taker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_broker_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_dest: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    nonce: Option<u64>,
    index: Option<u32>,
    root: Option<[u8; 32]>,
    meta_hash: Option<[u8; 32]>,
    creator_shares: Option<Vec<u8>>,
    creator_verified: Option<Vec<bool>>,
    seller_fee_basis_points: Option<u16>,
    max_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
