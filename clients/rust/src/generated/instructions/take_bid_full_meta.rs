//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::TCollection;
use crate::generated::types::TTokenProgramVersion;
use crate::generated::types::TTokenStandard;
use crate::generated::types::TUses;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct TakeBidFullMeta {
    pub tcomp: solana_program::pubkey::Pubkey,

    pub tree_authority: solana_program::pubkey::Pubkey,

    pub seller: solana_program::pubkey::Pubkey,

    pub delegate: solana_program::pubkey::Pubkey,

    pub merkle_tree: solana_program::pubkey::Pubkey,

    pub log_wrapper: solana_program::pubkey::Pubkey,

    pub compression_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub bubblegum_program: solana_program::pubkey::Pubkey,

    pub marketplace_program: solana_program::pubkey::Pubkey,

    pub tensorswap_program: solana_program::pubkey::Pubkey,

    pub bid_state: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub taker_broker: Option<solana_program::pubkey::Pubkey>,

    pub maker_broker: Option<solana_program::pubkey::Pubkey>,

    pub margin_account: solana_program::pubkey::Pubkey,

    pub whitelist: solana_program::pubkey::Pubkey,

    pub cosigner: Option<solana_program::pubkey::Pubkey>,

    pub rent_dest: solana_program::pubkey::Pubkey,
}

impl TakeBidFullMeta {
    pub fn instruction(
        &self,
        args: TakeBidFullMetaInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TakeBidFullMetaInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(19 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tcomp, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tree_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.seller,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.delegate,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_tree,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.log_wrapper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.compression_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.bubblegum_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marketplace_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tensorswap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bid_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, false,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                taker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                maker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.margin_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whitelist,
            false,
        ));
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                cosigner, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_dest,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = TakeBidFullMetaInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct TakeBidFullMetaInstructionData {
    discriminator: [u8; 8],
}

impl TakeBidFullMetaInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [242, 194, 203, 225, 234, 53, 10, 96],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TakeBidFullMetaInstructionArgs {
    pub nonce: u64,
    pub index: u32,
    pub root: [u8; 32],
    pub name: String,
    pub symbol: String,
    pub uri: String,
    pub seller_fee_basis_points: u16,
    pub primary_sale_happened: bool,
    pub is_mutable: bool,
    pub edition_nonce: Option<u8>,
    pub token_standard: Option<TTokenStandard>,
    pub collection: Option<TCollection>,
    pub uses: Option<TUses>,
    pub token_program_version: TTokenProgramVersion,
    pub creator_shares: Vec<u8>,
    pub creator_verified: Vec<bool>,
    pub min_amount: u64,
    pub optional_royalty_pct: Option<u16>,
}

/// Instruction builder for `TakeBidFullMeta`.
///
/// ### Accounts:
///
///   0. `[writable]` tcomp
///   1. `[]` tree_authority
///   2. `[writable]` seller
///   3. `[]` delegate
///   4. `[writable]` merkle_tree
///   5. `[]` log_wrapper
///   6. `[]` compression_program
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[]` bubblegum_program
///   9. `[optional]` marketplace_program (default to `TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp`)
///   10. `[]` tensorswap_program
///   11. `[writable]` bid_state
///   12. `[writable]` owner
///   13. `[writable, optional]` taker_broker
///   14. `[writable, optional]` maker_broker
///   15. `[writable]` margin_account
///   16. `[]` whitelist
///   17. `[signer, optional]` cosigner
///   18. `[writable]` rent_dest
#[derive(Default)]
pub struct TakeBidFullMetaBuilder {
    tcomp: Option<solana_program::pubkey::Pubkey>,
    tree_authority: Option<solana_program::pubkey::Pubkey>,
    seller: Option<solana_program::pubkey::Pubkey>,
    delegate: Option<solana_program::pubkey::Pubkey>,
    merkle_tree: Option<solana_program::pubkey::Pubkey>,
    log_wrapper: Option<solana_program::pubkey::Pubkey>,
    compression_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    bubblegum_program: Option<solana_program::pubkey::Pubkey>,
    marketplace_program: Option<solana_program::pubkey::Pubkey>,
    tensorswap_program: Option<solana_program::pubkey::Pubkey>,
    bid_state: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    taker_broker: Option<solana_program::pubkey::Pubkey>,
    maker_broker: Option<solana_program::pubkey::Pubkey>,
    margin_account: Option<solana_program::pubkey::Pubkey>,
    whitelist: Option<solana_program::pubkey::Pubkey>,
    cosigner: Option<solana_program::pubkey::Pubkey>,
    rent_dest: Option<solana_program::pubkey::Pubkey>,
    nonce: Option<u64>,
    index: Option<u32>,
    root: Option<[u8; 32]>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    seller_fee_basis_points: Option<u16>,
    primary_sale_happened: Option<bool>,
    is_mutable: Option<bool>,
    edition_nonce: Option<u8>,
    token_standard: Option<TTokenStandard>,
    collection: Option<TCollection>,
    uses: Option<TUses>,
    token_program_version: Option<TTokenProgramVersion>,
    creator_shares: Option<Vec<u8>>,
    creator_verified: Option<Vec<bool>>,
    min_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl TakeBidFullMetaBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn tcomp(&mut self, tcomp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tcomp = Some(tcomp);
        self
    }
    #[inline(always)]
    pub fn tree_authority(&mut self, tree_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tree_authority = Some(tree_authority);
        self
    }
    #[inline(always)]
    pub fn seller(&mut self, seller: solana_program::pubkey::Pubkey) -> &mut Self {
        self.seller = Some(seller);
        self
    }
    #[inline(always)]
    pub fn delegate(&mut self, delegate: solana_program::pubkey::Pubkey) -> &mut Self {
        self.delegate = Some(delegate);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(&mut self, merkle_tree: solana_program::pubkey::Pubkey) -> &mut Self {
        self.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.log_wrapper = Some(log_wrapper);
        self
    }
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.compression_program = Some(compression_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bubblegum_program(
        &mut self,
        bubblegum_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bubblegum_program = Some(bubblegum_program);
        self
    }
    /// `[optional account, default to 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp']`
    #[inline(always)]
    pub fn marketplace_program(
        &mut self,
        marketplace_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marketplace_program = Some(marketplace_program);
        self
    }
    #[inline(always)]
    pub fn tensorswap_program(
        &mut self,
        tensorswap_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tensorswap_program = Some(tensorswap_program);
        self
    }
    #[inline(always)]
    pub fn bid_state(&mut self, bid_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bid_state = Some(bid_state);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_broker = maker_broker;
        self
    }
    #[inline(always)]
    pub fn margin_account(&mut self, margin_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.margin_account = Some(margin_account);
        self
    }
    #[inline(always)]
    pub fn whitelist(&mut self, whitelist: solana_program::pubkey::Pubkey) -> &mut Self {
        self.whitelist = Some(whitelist);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn cosigner(&mut self, cosigner: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.cosigner = cosigner;
        self
    }
    #[inline(always)]
    pub fn rent_dest(&mut self, rent_dest: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_dest = Some(rent_dest);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn seller_fee_basis_points(&mut self, seller_fee_basis_points: u16) -> &mut Self {
        self.seller_fee_basis_points = Some(seller_fee_basis_points);
        self
    }
    #[inline(always)]
    pub fn primary_sale_happened(&mut self, primary_sale_happened: bool) -> &mut Self {
        self.primary_sale_happened = Some(primary_sale_happened);
        self
    }
    #[inline(always)]
    pub fn is_mutable(&mut self, is_mutable: bool) -> &mut Self {
        self.is_mutable = Some(is_mutable);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn edition_nonce(&mut self, edition_nonce: u8) -> &mut Self {
        self.edition_nonce = Some(edition_nonce);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn token_standard(&mut self, token_standard: TTokenStandard) -> &mut Self {
        self.token_standard = Some(token_standard);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn collection(&mut self, collection: TCollection) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn uses(&mut self, uses: TUses) -> &mut Self {
        self.uses = Some(uses);
        self
    }
    #[inline(always)]
    pub fn token_program_version(
        &mut self,
        token_program_version: TTokenProgramVersion,
    ) -> &mut Self {
        self.token_program_version = Some(token_program_version);
        self
    }
    #[inline(always)]
    pub fn creator_shares(&mut self, creator_shares: Vec<u8>) -> &mut Self {
        self.creator_shares = Some(creator_shares);
        self
    }
    #[inline(always)]
    pub fn creator_verified(&mut self, creator_verified: Vec<bool>) -> &mut Self {
        self.creator_verified = Some(creator_verified);
        self
    }
    #[inline(always)]
    pub fn min_amount(&mut self, min_amount: u64) -> &mut Self {
        self.min_amount = Some(min_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = TakeBidFullMeta {
            tcomp: self.tcomp.expect("tcomp is not set"),
            tree_authority: self.tree_authority.expect("tree_authority is not set"),
            seller: self.seller.expect("seller is not set"),
            delegate: self.delegate.expect("delegate is not set"),
            merkle_tree: self.merkle_tree.expect("merkle_tree is not set"),
            log_wrapper: self.log_wrapper.expect("log_wrapper is not set"),
            compression_program: self
                .compression_program
                .expect("compression_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            bubblegum_program: self
                .bubblegum_program
                .expect("bubblegum_program is not set"),
            marketplace_program: self.marketplace_program.unwrap_or(solana_program::pubkey!(
                "TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp"
            )),
            tensorswap_program: self
                .tensorswap_program
                .expect("tensorswap_program is not set"),
            bid_state: self.bid_state.expect("bid_state is not set"),
            owner: self.owner.expect("owner is not set"),
            taker_broker: self.taker_broker,
            maker_broker: self.maker_broker,
            margin_account: self.margin_account.expect("margin_account is not set"),
            whitelist: self.whitelist.expect("whitelist is not set"),
            cosigner: self.cosigner,
            rent_dest: self.rent_dest.expect("rent_dest is not set"),
        };
        let args = TakeBidFullMetaInstructionArgs {
            nonce: self.nonce.clone().expect("nonce is not set"),
            index: self.index.clone().expect("index is not set"),
            root: self.root.clone().expect("root is not set"),
            name: self.name.clone().expect("name is not set"),
            symbol: self.symbol.clone().expect("symbol is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            seller_fee_basis_points: self
                .seller_fee_basis_points
                .clone()
                .expect("seller_fee_basis_points is not set"),
            primary_sale_happened: self
                .primary_sale_happened
                .clone()
                .expect("primary_sale_happened is not set"),
            is_mutable: self.is_mutable.clone().expect("is_mutable is not set"),
            edition_nonce: self.edition_nonce.clone(),
            token_standard: self.token_standard.clone(),
            collection: self.collection.clone(),
            uses: self.uses.clone(),
            token_program_version: self
                .token_program_version
                .clone()
                .expect("token_program_version is not set"),
            creator_shares: self
                .creator_shares
                .clone()
                .expect("creator_shares is not set"),
            creator_verified: self
                .creator_verified
                .clone()
                .expect("creator_verified is not set"),
            min_amount: self.min_amount.clone().expect("min_amount is not set"),
            optional_royalty_pct: self.optional_royalty_pct.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `take_bid_full_meta` CPI accounts.
pub struct TakeBidFullMetaCpiAccounts<'a, 'b> {
    pub tcomp: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller: &'b solana_program::account_info::AccountInfo<'a>,

    pub delegate: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tensorswap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bid_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub margin_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub whitelist: &'b solana_program::account_info::AccountInfo<'a>,

    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_dest: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `take_bid_full_meta` CPI instruction.
pub struct TakeBidFullMetaCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tcomp: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller: &'b solana_program::account_info::AccountInfo<'a>,

    pub delegate: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tensorswap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub bid_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub margin_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub whitelist: &'b solana_program::account_info::AccountInfo<'a>,

    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_dest: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TakeBidFullMetaInstructionArgs,
}

impl<'a, 'b> TakeBidFullMetaCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: TakeBidFullMetaCpiAccounts<'a, 'b>,
        args: TakeBidFullMetaInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            tcomp: accounts.tcomp,
            tree_authority: accounts.tree_authority,
            seller: accounts.seller,
            delegate: accounts.delegate,
            merkle_tree: accounts.merkle_tree,
            log_wrapper: accounts.log_wrapper,
            compression_program: accounts.compression_program,
            system_program: accounts.system_program,
            bubblegum_program: accounts.bubblegum_program,
            marketplace_program: accounts.marketplace_program,
            tensorswap_program: accounts.tensorswap_program,
            bid_state: accounts.bid_state,
            owner: accounts.owner,
            taker_broker: accounts.taker_broker,
            maker_broker: accounts.maker_broker,
            margin_account: accounts.margin_account,
            whitelist: accounts.whitelist,
            cosigner: accounts.cosigner,
            rent_dest: accounts.rent_dest,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(19 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tcomp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tree_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.seller.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.delegate.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_tree.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.log_wrapper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.compression_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bubblegum_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marketplace_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tensorswap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bid_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            false,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *taker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *maker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.margin_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whitelist.key,
            false,
        ));
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *cosigner.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_dest.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = TakeBidFullMetaInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(19 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.tcomp.clone());
        account_infos.push(self.tree_authority.clone());
        account_infos.push(self.seller.clone());
        account_infos.push(self.delegate.clone());
        account_infos.push(self.merkle_tree.clone());
        account_infos.push(self.log_wrapper.clone());
        account_infos.push(self.compression_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.bubblegum_program.clone());
        account_infos.push(self.marketplace_program.clone());
        account_infos.push(self.tensorswap_program.clone());
        account_infos.push(self.bid_state.clone());
        account_infos.push(self.owner.clone());
        if let Some(taker_broker) = self.taker_broker {
            account_infos.push(taker_broker.clone());
        }
        if let Some(maker_broker) = self.maker_broker {
            account_infos.push(maker_broker.clone());
        }
        account_infos.push(self.margin_account.clone());
        account_infos.push(self.whitelist.clone());
        if let Some(cosigner) = self.cosigner {
            account_infos.push(cosigner.clone());
        }
        account_infos.push(self.rent_dest.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TakeBidFullMeta` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` tcomp
///   1. `[]` tree_authority
///   2. `[writable]` seller
///   3. `[]` delegate
///   4. `[writable]` merkle_tree
///   5. `[]` log_wrapper
///   6. `[]` compression_program
///   7. `[]` system_program
///   8. `[]` bubblegum_program
///   9. `[]` marketplace_program
///   10. `[]` tensorswap_program
///   11. `[writable]` bid_state
///   12. `[writable]` owner
///   13. `[writable, optional]` taker_broker
///   14. `[writable, optional]` maker_broker
///   15. `[writable]` margin_account
///   16. `[]` whitelist
///   17. `[signer, optional]` cosigner
///   18. `[writable]` rent_dest
pub struct TakeBidFullMetaCpiBuilder<'a, 'b> {
    instruction: Box<TakeBidFullMetaCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TakeBidFullMetaCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TakeBidFullMetaCpiBuilderInstruction {
            __program: program,
            tcomp: None,
            tree_authority: None,
            seller: None,
            delegate: None,
            merkle_tree: None,
            log_wrapper: None,
            compression_program: None,
            system_program: None,
            bubblegum_program: None,
            marketplace_program: None,
            tensorswap_program: None,
            bid_state: None,
            owner: None,
            taker_broker: None,
            maker_broker: None,
            margin_account: None,
            whitelist: None,
            cosigner: None,
            rent_dest: None,
            nonce: None,
            index: None,
            root: None,
            name: None,
            symbol: None,
            uri: None,
            seller_fee_basis_points: None,
            primary_sale_happened: None,
            is_mutable: None,
            edition_nonce: None,
            token_standard: None,
            collection: None,
            uses: None,
            token_program_version: None,
            creator_shares: None,
            creator_verified: None,
            min_amount: None,
            optional_royalty_pct: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn tcomp(&mut self, tcomp: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.tcomp = Some(tcomp);
        self
    }
    #[inline(always)]
    pub fn tree_authority(
        &mut self,
        tree_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tree_authority = Some(tree_authority);
        self
    }
    #[inline(always)]
    pub fn seller(
        &mut self,
        seller: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.seller = Some(seller);
        self
    }
    #[inline(always)]
    pub fn delegate(
        &mut self,
        delegate: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.delegate = Some(delegate);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(
        &mut self,
        merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn log_wrapper(
        &mut self,
        log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.log_wrapper = Some(log_wrapper);
        self
    }
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.compression_program = Some(compression_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bubblegum_program(
        &mut self,
        bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bubblegum_program = Some(bubblegum_program);
        self
    }
    #[inline(always)]
    pub fn marketplace_program(
        &mut self,
        marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marketplace_program = Some(marketplace_program);
        self
    }
    #[inline(always)]
    pub fn tensorswap_program(
        &mut self,
        tensorswap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tensorswap_program = Some(tensorswap_program);
        self
    }
    #[inline(always)]
    pub fn bid_state(
        &mut self,
        bid_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bid_state = Some(bid_state);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_broker = maker_broker;
        self
    }
    #[inline(always)]
    pub fn margin_account(
        &mut self,
        margin_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.margin_account = Some(margin_account);
        self
    }
    #[inline(always)]
    pub fn whitelist(
        &mut self,
        whitelist: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.whitelist = Some(whitelist);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn cosigner(
        &mut self,
        cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.cosigner = cosigner;
        self
    }
    #[inline(always)]
    pub fn rent_dest(
        &mut self,
        rent_dest: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_dest = Some(rent_dest);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.instruction.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.instruction.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn seller_fee_basis_points(&mut self, seller_fee_basis_points: u16) -> &mut Self {
        self.instruction.seller_fee_basis_points = Some(seller_fee_basis_points);
        self
    }
    #[inline(always)]
    pub fn primary_sale_happened(&mut self, primary_sale_happened: bool) -> &mut Self {
        self.instruction.primary_sale_happened = Some(primary_sale_happened);
        self
    }
    #[inline(always)]
    pub fn is_mutable(&mut self, is_mutable: bool) -> &mut Self {
        self.instruction.is_mutable = Some(is_mutable);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn edition_nonce(&mut self, edition_nonce: u8) -> &mut Self {
        self.instruction.edition_nonce = Some(edition_nonce);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn token_standard(&mut self, token_standard: TTokenStandard) -> &mut Self {
        self.instruction.token_standard = Some(token_standard);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn collection(&mut self, collection: TCollection) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn uses(&mut self, uses: TUses) -> &mut Self {
        self.instruction.uses = Some(uses);
        self
    }
    #[inline(always)]
    pub fn token_program_version(
        &mut self,
        token_program_version: TTokenProgramVersion,
    ) -> &mut Self {
        self.instruction.token_program_version = Some(token_program_version);
        self
    }
    #[inline(always)]
    pub fn creator_shares(&mut self, creator_shares: Vec<u8>) -> &mut Self {
        self.instruction.creator_shares = Some(creator_shares);
        self
    }
    #[inline(always)]
    pub fn creator_verified(&mut self, creator_verified: Vec<bool>) -> &mut Self {
        self.instruction.creator_verified = Some(creator_verified);
        self
    }
    #[inline(always)]
    pub fn min_amount(&mut self, min_amount: u64) -> &mut Self {
        self.instruction.min_amount = Some(min_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.instruction.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = TakeBidFullMetaInstructionArgs {
            nonce: self.instruction.nonce.clone().expect("nonce is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
            root: self.instruction.root.clone().expect("root is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
            symbol: self.instruction.symbol.clone().expect("symbol is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            seller_fee_basis_points: self
                .instruction
                .seller_fee_basis_points
                .clone()
                .expect("seller_fee_basis_points is not set"),
            primary_sale_happened: self
                .instruction
                .primary_sale_happened
                .clone()
                .expect("primary_sale_happened is not set"),
            is_mutable: self
                .instruction
                .is_mutable
                .clone()
                .expect("is_mutable is not set"),
            edition_nonce: self.instruction.edition_nonce.clone(),
            token_standard: self.instruction.token_standard.clone(),
            collection: self.instruction.collection.clone(),
            uses: self.instruction.uses.clone(),
            token_program_version: self
                .instruction
                .token_program_version
                .clone()
                .expect("token_program_version is not set"),
            creator_shares: self
                .instruction
                .creator_shares
                .clone()
                .expect("creator_shares is not set"),
            creator_verified: self
                .instruction
                .creator_verified
                .clone()
                .expect("creator_verified is not set"),
            min_amount: self
                .instruction
                .min_amount
                .clone()
                .expect("min_amount is not set"),
            optional_royalty_pct: self.instruction.optional_royalty_pct.clone(),
        };
        let instruction = TakeBidFullMetaCpi {
            __program: self.instruction.__program,

            tcomp: self.instruction.tcomp.expect("tcomp is not set"),

            tree_authority: self
                .instruction
                .tree_authority
                .expect("tree_authority is not set"),

            seller: self.instruction.seller.expect("seller is not set"),

            delegate: self.instruction.delegate.expect("delegate is not set"),

            merkle_tree: self
                .instruction
                .merkle_tree
                .expect("merkle_tree is not set"),

            log_wrapper: self
                .instruction
                .log_wrapper
                .expect("log_wrapper is not set"),

            compression_program: self
                .instruction
                .compression_program
                .expect("compression_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            bubblegum_program: self
                .instruction
                .bubblegum_program
                .expect("bubblegum_program is not set"),

            marketplace_program: self
                .instruction
                .marketplace_program
                .expect("marketplace_program is not set"),

            tensorswap_program: self
                .instruction
                .tensorswap_program
                .expect("tensorswap_program is not set"),

            bid_state: self.instruction.bid_state.expect("bid_state is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            taker_broker: self.instruction.taker_broker,

            maker_broker: self.instruction.maker_broker,

            margin_account: self
                .instruction
                .margin_account
                .expect("margin_account is not set"),

            whitelist: self.instruction.whitelist.expect("whitelist is not set"),

            cosigner: self.instruction.cosigner,

            rent_dest: self.instruction.rent_dest.expect("rent_dest is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct TakeBidFullMetaCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    tcomp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tree_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    delegate: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    merkle_tree: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    compression_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bubblegum_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marketplace_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tensorswap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bid_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    margin_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    whitelist: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_dest: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    nonce: Option<u64>,
    index: Option<u32>,
    root: Option<[u8; 32]>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    seller_fee_basis_points: Option<u16>,
    primary_sale_happened: Option<bool>,
    is_mutable: Option<bool>,
    edition_nonce: Option<u8>,
    token_standard: Option<TTokenStandard>,
    collection: Option<TCollection>,
    uses: Option<TUses>,
    token_program_version: Option<TTokenProgramVersion>,
    creator_shares: Option<Vec<u8>>,
    creator_verified: Option<Vec<bool>>,
    min_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
