//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::generated::types::AuthorizationDataLocal;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct BuyLegacy {
    pub fee_vault: solana_program::pubkey::Pubkey,

    pub buyer: solana_program::pubkey::Pubkey,

    pub buyer_ta: solana_program::pubkey::Pubkey,

    pub list_ta: solana_program::pubkey::Pubkey,

    pub list_state: solana_program::pubkey::Pubkey,

    pub mint: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub taker_broker: Option<solana_program::pubkey::Pubkey>,

    pub maker_broker: Option<solana_program::pubkey::Pubkey>,

    pub rent_destination: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub marketplace_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub metadata: solana_program::pubkey::Pubkey,

    pub edition: solana_program::pubkey::Pubkey,

    pub buyer_token_record: Option<solana_program::pubkey::Pubkey>,

    pub list_token_record: Option<solana_program::pubkey::Pubkey>,

    pub authorization_rules: Option<solana_program::pubkey::Pubkey>,

    pub authorization_rules_program: Option<solana_program::pubkey::Pubkey>,

    pub token_metadata_program: Option<solana_program::pubkey::Pubkey>,

    pub sysvar_instructions: Option<solana_program::pubkey::Pubkey>,

    pub cosigner: Option<solana_program::pubkey::Pubkey>,
}

impl BuyLegacy {
    pub fn instruction(
        &self,
        args: BuyLegacyInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BuyLegacyInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.buyer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.buyer_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.list_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.list_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                taker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                maker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marketplace_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.edition,
            false,
        ));
        if let Some(buyer_token_record) = self.buyer_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                buyer_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(list_token_record) = self.list_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                list_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                token_metadata_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                sysvar_instructions,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                cosigner, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = BuyLegacyInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BuyLegacyInstructionData {
    discriminator: [u8; 8],
}

impl BuyLegacyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [68, 127, 43, 8, 212, 31, 249, 114],
        }
    }
}

impl Default for BuyLegacyInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyLegacyInstructionArgs {
    pub max_amount: u64,
    pub optional_royalty_pct: Option<u16>,
    pub authorization_data: Option<AuthorizationDataLocal>,
}

/// Instruction builder for `BuyLegacy`.
///
/// ### Accounts:
///
///   0. `[writable]` fee_vault
///   1. `[]` buyer
///   2. `[writable]` buyer_ta
///   3. `[writable]` list_ta
///   4. `[writable]` list_state
///   5. `[]` mint
///   6. `[writable]` owner
///   7. `[writable, signer]` payer
///   8. `[writable, optional]` taker_broker
///   9. `[writable, optional]` maker_broker
///   10. `[writable]` rent_destination
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   13. `[optional]` marketplace_program (default to `TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp`)
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   15. `[writable]` metadata
///   16. `[]` edition
///   17. `[writable, optional]` buyer_token_record
///   18. `[writable, optional]` list_token_record
///   19. `[optional]` authorization_rules
///   20. `[optional]` authorization_rules_program
///   21. `[optional]` token_metadata_program
///   22. `[optional]` sysvar_instructions
///   23. `[signer, optional]` cosigner (default to `TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp`)
#[derive(Clone, Debug, Default)]
pub struct BuyLegacyBuilder {
    fee_vault: Option<solana_program::pubkey::Pubkey>,
    buyer: Option<solana_program::pubkey::Pubkey>,
    buyer_ta: Option<solana_program::pubkey::Pubkey>,
    list_ta: Option<solana_program::pubkey::Pubkey>,
    list_state: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    taker_broker: Option<solana_program::pubkey::Pubkey>,
    maker_broker: Option<solana_program::pubkey::Pubkey>,
    rent_destination: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    marketplace_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    metadata: Option<solana_program::pubkey::Pubkey>,
    edition: Option<solana_program::pubkey::Pubkey>,
    buyer_token_record: Option<solana_program::pubkey::Pubkey>,
    list_token_record: Option<solana_program::pubkey::Pubkey>,
    authorization_rules: Option<solana_program::pubkey::Pubkey>,
    authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    cosigner: Option<solana_program::pubkey::Pubkey>,
    max_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    authorization_data: Option<AuthorizationDataLocal>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BuyLegacyBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn fee_vault(&mut self, fee_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_vault = Some(fee_vault);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn buyer_ta(&mut self, buyer_ta: solana_program::pubkey::Pubkey) -> &mut Self {
        self.buyer_ta = Some(buyer_ta);
        self
    }
    #[inline(always)]
    pub fn list_ta(&mut self, list_ta: solana_program::pubkey::Pubkey) -> &mut Self {
        self.list_ta = Some(list_ta);
        self
    }
    #[inline(always)]
    pub fn list_state(&mut self, list_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.list_state = Some(list_state);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_broker = maker_broker;
        self
    }
    #[inline(always)]
    pub fn rent_destination(
        &mut self,
        rent_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.rent_destination = Some(rent_destination);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp']`
    #[inline(always)]
    pub fn marketplace_program(
        &mut self,
        marketplace_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marketplace_program = Some(marketplace_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    #[inline(always)]
    pub fn edition(&mut self, edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.edition = Some(edition);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn buyer_token_record(
        &mut self,
        buyer_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.buyer_token_record = buyer_token_record;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn list_token_record(
        &mut self,
        list_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.list_token_record = list_token_record;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.token_metadata_program = token_metadata_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.sysvar_instructions = sysvar_instructions;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn cosigner(&mut self, cosigner: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.cosigner = cosigner;
        self
    }
    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.max_amount = Some(max_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authorization_data(&mut self, authorization_data: AuthorizationDataLocal) -> &mut Self {
        self.authorization_data = Some(authorization_data);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BuyLegacy {
            fee_vault: self.fee_vault.expect("fee_vault is not set"),
            buyer: self.buyer.expect("buyer is not set"),
            buyer_ta: self.buyer_ta.expect("buyer_ta is not set"),
            list_ta: self.list_ta.expect("list_ta is not set"),
            list_state: self.list_state.expect("list_state is not set"),
            mint: self.mint.expect("mint is not set"),
            owner: self.owner.expect("owner is not set"),
            payer: self.payer.expect("payer is not set"),
            taker_broker: self.taker_broker,
            maker_broker: self.maker_broker,
            rent_destination: self.rent_destination.expect("rent_destination is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            marketplace_program: self.marketplace_program.unwrap_or(solana_program::pubkey!(
                "TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            metadata: self.metadata.expect("metadata is not set"),
            edition: self.edition.expect("edition is not set"),
            buyer_token_record: self.buyer_token_record,
            list_token_record: self.list_token_record,
            authorization_rules: self.authorization_rules,
            authorization_rules_program: self.authorization_rules_program,
            token_metadata_program: self.token_metadata_program,
            sysvar_instructions: self.sysvar_instructions,
            cosigner: self.cosigner,
        };
        let args = BuyLegacyInstructionArgs {
            max_amount: self.max_amount.clone().expect("max_amount is not set"),
            optional_royalty_pct: self.optional_royalty_pct.clone(),
            authorization_data: self.authorization_data.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `buy_legacy` CPI accounts.
pub struct BuyLegacyCpiAccounts<'a, 'b> {
    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub list_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `buy_legacy` CPI instruction.
pub struct BuyLegacyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub list_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub rent_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub list_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: BuyLegacyInstructionArgs,
}

impl<'a, 'b> BuyLegacyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BuyLegacyCpiAccounts<'a, 'b>,
        args: BuyLegacyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            fee_vault: accounts.fee_vault,
            buyer: accounts.buyer,
            buyer_ta: accounts.buyer_ta,
            list_ta: accounts.list_ta,
            list_state: accounts.list_state,
            mint: accounts.mint,
            owner: accounts.owner,
            payer: accounts.payer,
            taker_broker: accounts.taker_broker,
            maker_broker: accounts.maker_broker,
            rent_destination: accounts.rent_destination,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            marketplace_program: accounts.marketplace_program,
            system_program: accounts.system_program,
            metadata: accounts.metadata,
            edition: accounts.edition,
            buyer_token_record: accounts.buyer_token_record,
            list_token_record: accounts.list_token_record,
            authorization_rules: accounts.authorization_rules,
            authorization_rules_program: accounts.authorization_rules_program,
            token_metadata_program: accounts.token_metadata_program,
            sysvar_instructions: accounts.sysvar_instructions,
            cosigner: accounts.cosigner,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.buyer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.buyer_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.list_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.list_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *taker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *maker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marketplace_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.edition.key,
            false,
        ));
        if let Some(buyer_token_record) = self.buyer_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *buyer_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(list_token_record) = self.list_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *list_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *token_metadata_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *sysvar_instructions.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *cosigner.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_MARKETPLACE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = BuyLegacyInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TENSOR_MARKETPLACE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(24 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.fee_vault.clone());
        account_infos.push(self.buyer.clone());
        account_infos.push(self.buyer_ta.clone());
        account_infos.push(self.list_ta.clone());
        account_infos.push(self.list_state.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.payer.clone());
        if let Some(taker_broker) = self.taker_broker {
            account_infos.push(taker_broker.clone());
        }
        if let Some(maker_broker) = self.maker_broker {
            account_infos.push(maker_broker.clone());
        }
        account_infos.push(self.rent_destination.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.marketplace_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.metadata.clone());
        account_infos.push(self.edition.clone());
        if let Some(buyer_token_record) = self.buyer_token_record {
            account_infos.push(buyer_token_record.clone());
        }
        if let Some(list_token_record) = self.list_token_record {
            account_infos.push(list_token_record.clone());
        }
        if let Some(authorization_rules) = self.authorization_rules {
            account_infos.push(authorization_rules.clone());
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            account_infos.push(authorization_rules_program.clone());
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            account_infos.push(token_metadata_program.clone());
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            account_infos.push(sysvar_instructions.clone());
        }
        if let Some(cosigner) = self.cosigner {
            account_infos.push(cosigner.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BuyLegacy` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` fee_vault
///   1. `[]` buyer
///   2. `[writable]` buyer_ta
///   3. `[writable]` list_ta
///   4. `[writable]` list_state
///   5. `[]` mint
///   6. `[writable]` owner
///   7. `[writable, signer]` payer
///   8. `[writable, optional]` taker_broker
///   9. `[writable, optional]` maker_broker
///   10. `[writable]` rent_destination
///   11. `[]` token_program
///   12. `[]` associated_token_program
///   13. `[]` marketplace_program
///   14. `[]` system_program
///   15. `[writable]` metadata
///   16. `[]` edition
///   17. `[writable, optional]` buyer_token_record
///   18. `[writable, optional]` list_token_record
///   19. `[optional]` authorization_rules
///   20. `[optional]` authorization_rules_program
///   21. `[optional]` token_metadata_program
///   22. `[optional]` sysvar_instructions
///   23. `[signer, optional]` cosigner
#[derive(Clone, Debug)]
pub struct BuyLegacyCpiBuilder<'a, 'b> {
    instruction: Box<BuyLegacyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BuyLegacyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BuyLegacyCpiBuilderInstruction {
            __program: program,
            fee_vault: None,
            buyer: None,
            buyer_ta: None,
            list_ta: None,
            list_state: None,
            mint: None,
            owner: None,
            payer: None,
            taker_broker: None,
            maker_broker: None,
            rent_destination: None,
            token_program: None,
            associated_token_program: None,
            marketplace_program: None,
            system_program: None,
            metadata: None,
            edition: None,
            buyer_token_record: None,
            list_token_record: None,
            authorization_rules: None,
            authorization_rules_program: None,
            token_metadata_program: None,
            sysvar_instructions: None,
            cosigner: None,
            max_amount: None,
            optional_royalty_pct: None,
            authorization_data: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn fee_vault(
        &mut self,
        fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_vault = Some(fee_vault);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn buyer_ta(
        &mut self,
        buyer_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.buyer_ta = Some(buyer_ta);
        self
    }
    #[inline(always)]
    pub fn list_ta(
        &mut self,
        list_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.list_ta = Some(list_ta);
        self
    }
    #[inline(always)]
    pub fn list_state(
        &mut self,
        list_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.list_state = Some(list_state);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_broker = maker_broker;
        self
    }
    #[inline(always)]
    pub fn rent_destination(
        &mut self,
        rent_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_destination = Some(rent_destination);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn marketplace_program(
        &mut self,
        marketplace_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marketplace_program = Some(marketplace_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn metadata(
        &mut self,
        metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }
    #[inline(always)]
    pub fn edition(
        &mut self,
        edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.edition = Some(edition);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn buyer_token_record(
        &mut self,
        buyer_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.buyer_token_record = buyer_token_record;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn list_token_record(
        &mut self,
        list_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.list_token_record = list_token_record;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = token_metadata_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = sysvar_instructions;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn cosigner(
        &mut self,
        cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.cosigner = cosigner;
        self
    }
    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.instruction.max_amount = Some(max_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.instruction.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authorization_data(&mut self, authorization_data: AuthorizationDataLocal) -> &mut Self {
        self.instruction.authorization_data = Some(authorization_data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BuyLegacyInstructionArgs {
            max_amount: self
                .instruction
                .max_amount
                .clone()
                .expect("max_amount is not set"),
            optional_royalty_pct: self.instruction.optional_royalty_pct.clone(),
            authorization_data: self.instruction.authorization_data.clone(),
        };
        let instruction = BuyLegacyCpi {
            __program: self.instruction.__program,

            fee_vault: self.instruction.fee_vault.expect("fee_vault is not set"),

            buyer: self.instruction.buyer.expect("buyer is not set"),

            buyer_ta: self.instruction.buyer_ta.expect("buyer_ta is not set"),

            list_ta: self.instruction.list_ta.expect("list_ta is not set"),

            list_state: self.instruction.list_state.expect("list_state is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            taker_broker: self.instruction.taker_broker,

            maker_broker: self.instruction.maker_broker,

            rent_destination: self
                .instruction
                .rent_destination
                .expect("rent_destination is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            marketplace_program: self
                .instruction
                .marketplace_program
                .expect("marketplace_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            metadata: self.instruction.metadata.expect("metadata is not set"),

            edition: self.instruction.edition.expect("edition is not set"),

            buyer_token_record: self.instruction.buyer_token_record,

            list_token_record: self.instruction.list_token_record,

            authorization_rules: self.instruction.authorization_rules,

            authorization_rules_program: self.instruction.authorization_rules_program,

            token_metadata_program: self.instruction.token_metadata_program,

            sysvar_instructions: self.instruction.sysvar_instructions,

            cosigner: self.instruction.cosigner,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BuyLegacyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    fee_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    list_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    list_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marketplace_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    list_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    max_amount: Option<u64>,
    optional_royalty_pct: Option<u16>,
    authorization_data: Option<AuthorizationDataLocal>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
