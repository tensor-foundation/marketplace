name: Main

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CACHE: true
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"

permissions: read-all

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      any: ${{ steps.changes.outputs.any }}
      programs: ${{ steps.changes.outputs.programs }}
      program_matrix: ${{ steps.program_matrix.outputs.matrix }}
      js_client: ${{ steps.changes.outputs.js_client }}
      rust_client: ${{ steps.changes.outputs.rust_client }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: .github/file-filters.yml

      - name: Filter program matrix
        id: program_matrix
        uses: tensor-foundation/actions/filter-matrix@v2
        with:
          matrix: ${{ env.PROGRAMS }}
          changes: ${{ steps.changes.outputs.changes }}
          suffix: _binary

  lint_js:
    name: Lint (JavaScript)
    if: ${{ needs.changes.outputs.js_client == 'true' }}
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Node.js
        uses: tensor-foundation/actions/install-node-with-pnpm@v2
        with:
          version: ${{ inputs.node || env.NODE_VERSION }}
          cache: ${{ env.CACHE }}
          dependencies: false

      - uses: tensor-foundation/actions/install-node-dependencies@v2
        with:
          folder: ./clients/js
          command: pnpm install --frozen-lockfile
          cache: ${{ env.CACHE }}
          key: client-js

      - name: Format
        working-directory: ./clients/js
        run: pnpm format

      - name: Lint
        working-directory: ./clients/js
        run: pnpm lint

      - name: No only tests
        working-directory: ./clients/js
        run: |
          FILES=$(find test -type f -name '*.test.ts')
          EXIT_CODE=0

          while read FILE; do
            if grep -Eq 'test.only\(' $FILE; then
              echo "Error: '$FILE' contains 'test.only'"
              EXIT_CODE=1
            fi
          done <<< "$FILES"

          exit $EXIT_CODE

  lint_rust:
    name: Lint (Rust)
    if: ${{ needs.changes.outputs.programs == 'true' || needs.changes.outputs.rust_client == 'true' }}
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: tensor-foundation/actions/ssh-agent@v2
        with:
          key: |
            ${{ secrets.ESCROW_KEY }}
            ${{ secrets.TOOLBOX_KEY }}
            ${{ secrets.WHITELIST_KEY }}

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Rust
        uses: tensor-foundation/actions/install-rust@v2
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache program dependencies
        if: env.CACHE == 'true'
        uses: tensor-foundation/actions/cache-crate@v2
        with:
          folder: "."
          key: programs

      - name: Run cargo fmt
        uses: tensor-foundation/actions/cargo@v2
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: tensor-foundation/actions/cargo@v2
        with:
          command: clippy
          args: --all-targets --all-features --no-deps -- -D warnings

  build_programs:
    name: Programs
    needs: [changes, lint_js, lint_rust]
    if: |
      always() &&
      (needs.lint_js.result == 'success' || needs.lint_js.result == 'skipped') &&
      (needs.lint_rust.result == 'success' || needs.lint_rust.result == 'skipped') &&
      needs.changes.outputs.any == 'true'
    uses: ./.github/workflows/build-programs.yml
    secrets: inherit

  test_programs:
    name: Programs
    needs: [changes, lint_js, lint_rust]
    if: |
      always() &&
      (needs.lint_js.result == 'success' || needs.lint_js.result == 'skipped') &&
      (needs.lint_rust.result == 'success' || needs.lint_rust.result == 'skipped') &&
      needs.changes.outputs.programs == 'true'
    uses: ./.github/workflows/test-programs.yml
    secrets: inherit
    with:
      program_matrix: ${{ needs.changes.outputs.program_matrix }}

  generate_clients:
    name: Generate Clients
    if: ${{ needs.changes.outputs.any == 'true' }}
    needs: [changes, build_programs]
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Linux Build Deps
        run: sudo apt-get update && sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Rust
        uses: tensor-foundation/actions/install-rust@v2
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install Solana
        uses: tensor-foundation/actions/install-solana@v2
        with:
          version: ${{ env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache program dependencies
        if: env.CACHE == 'true'
        uses: tensor-foundation/actions/cache-crate@v2
        with:
          folder: "."
          key: programs

      - name: Install Node.js
        uses: tensor-foundation/actions/install-node-with-pnpm@v2
        with:
          version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE }}
          dependencies: true

      - name: Cache IDL generators
        if: env.CACHE == 'true'
        uses: tensor-foundation/actions/cache-idl-generators@v2
        with:
          path: "./.cargo/"

      - name: Generate IDLs and clients
        run: pnpm generate

      - name: Ensure working directory is clean
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  test_js:
    if: needs.changes.outputs.js_client == 'true'
    name: JavaScript Client
    needs: [changes, generate_clients]
    uses: ./.github/workflows/test-js-client.yml
    secrets: inherit

  test_anchor:
    if: needs.changes.outputs.js_client == 'true'
    name: Anchor Client
    needs: [changes, generate_clients]
    uses: ./.github/workflows/test-js-anchor.yml
    secrets: inherit

  build_rust_client:
    if: needs.changes.outputs.rust_client == 'true'
    name: Rust Client
    needs: [changes, generate_clients]
    uses: ./.github/workflows/build-rust-client.yml
    secrets: inherit

  test_rust_client:
    if: needs.changes.outputs.rust_client == 'true'
    name: Rust Client
    needs: [changes, generate_clients]
    uses: ./.github/workflows/test-rust-client.yml
    secrets: inherit
