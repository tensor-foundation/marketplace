name: Build Verify Programs

on:
  workflow_call:
    inputs:
      rust:
        type: string
      solana:
        type: string
      node:
        type: string
  workflow_dispatch:
    inputs:
      rust:
        description: Rust version
        default: 1.75.0
        required: true
        type: string
      solana:
        description: Solana version
        default: 1.17.22
        required: true
        type: string
      node:
        description: Node version
        default: 20.x
        required: true
        type: string
      verify:
        description: Verify build version
        default: 0.2.11
        required: true
        type: string

env:
  CACHE: true
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RPC: ${{ secrets.SOLANA_MAINNET_RPC_URL }}
  ARTIFACTS_TOKEN: ${{ secrets.ARTIFACTS_TOKEN }}

jobs:
  build_verify_programs:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: tensor-foundation/actions/ssh-agent@v2
        with:
          key: |
            ${{ secrets.ESCROW_KEY }}
            ${{ secrets.TOOLBOX_KEY }}
            ${{ secrets.WHITELIST_KEY }}

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Rust
        uses: tensor-foundation/actions/install-rust@v2
        with:
          toolchain: ${{ inputs.rust || env.RUST_VERSION }}

      - name: Install Solana
        uses: tensor-foundation/actions/install-solana@v3
        with:
          version: ${{ inputs.solana || env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Install Node.js
        uses: tensor-foundation/actions/install-node-with-pnpm@v2
        with:
          version: ${{ inputs.node || env.NODE_VERSION }}
          cache: ${{ env.CACHE }}
          dependencies: true

      - name: Cache program dependencies
        if: env.CACHE == 'true'
        uses: tensor-foundation/actions/cache-crate@v2
        with:
          folder: "."
          key: programs
    
      - name: Build cpi test program
        working-directory: ./cpitest
        run: cargo-build-sbf

      - name: Dump mainnet binaries
        run: pnpm programs:dump_binaries:mainnet

      - name: Cache solana-verify
        uses: actions/cache@v4
        id: cache-verify
        with:
          path: /home/runner/.cargo-install/solana-verify
          key: solana-verify-${{ inputs.verify || env.VERIFY_BUILD_VERSION }}-${{ runner.os }}

      - name: Install verify build
        if: steps.cache-verify.outputs.cache-hit != 'true'
        run: cargo install solana-verify --force --root /home/runner/.cargo-install/solana-verify --version ${{ inputs.verify || env.VERIFY_BUILD_VERSION }} --locked

      - name: Verify build program
        shell: bash
        run: |
          /home/runner/.cargo-install/solana-verify/bin/solana-verify build --library-name marketplace_program | tee >(tail -n 1 > build_hash.txt)

      - name: Upload programs build
        uses: actions/upload-artifact@v4
        with:
          name: programs-build
          # First wildcard ensures exported paths are consistently under the programs folder.
          path: |
            ./targe*/deploy/*.so
            build_hash.txt
          if-no-files-found: error
